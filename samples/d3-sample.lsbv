<?xml version="1.0"?>
<LsbView xmlns="https://github.com/xjluo-lsb/lsb.views"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://github.com/xjluo-lsb/lsb.views ..\LsbViewSchema.xsd"

  name="D3 view sample"
  author="Kevin Luo"
  createTime="2024-03-23T17:23:45z"
  lastChangeTime="2024-03-23T17:12:45z">

  <description>A sample view demonstrates using D3 library to visualize data.</description>
  <version major="0" minor="0" build="1" revision="0" />
    
  <view>
    <splitLayout
      id="5f256f90-2429-4356-ab3f-9cb746e30145"
      orientation="Horizontal"
      fixedView="Left"
      size="280">
      <left>
        <propertyInput id="fa660d96-5d2b-46a0-8cf9-41aa6ec8d110">
          <caption visible="false">Parameters</caption>
          <output>
            <param id="7a7270d8-85be-4147-af41-d3e87608f222" name="randomSigma"/>
            <param id="3a06bfd0-dac5-4bbd-8435-bb1b508dd978" name="xoffset"/>
            <param id="161452d1-8a86-40ae-bd01-20c2421ae06c" name="yoffset"/>
            <param id="87470081-1148-4d44-95a9-7fcb1962df03" name="pointCount"/>

            <param id="39fe7122-5109-4fab-95aa-5a061a0c34b9" name="parentCount"/>
            <param id="56b0fb38-2bae-42f6-84ea-e83228fbce20" name="childCount"/>
            <param id="076382fd-b6e8-413f-b84a-42974f4c92fc" name="extraCount"/>

            <param id="9bd179e7-26ec-4ed8-b4b0-bef737203e14" name="colorScheme"/>
          </output>
          <properties>
            <property name="randomSigma" label="Random StdDev" category="Scatterplot" type="Float" description="This is the seed for random numbers for Scatterplot" default="0.2" />
            <property name="xoffset" label="Horizontal offset" category="Scatterplot" type="Float" description="This is the horizontal offset between the clusters" default="0.6" />
            <property name="yoffset" label="Vertical offset" category="Scatterplot" type="Float" description="This is the vertical offset between the clusters" default="0.6" />
            <property name="pointCount" label="Number of points" category="Scatterplot" type="Integer" description="This is the number of points in each cluster" default="300" />

            <property name="parentCount" label="Parent node count" category="Disjoint force-directed graph" type="UnsignedInteger" description="Number of vertices in the parent group" default="100" />
            <property name="childCount" label="Child node count" category="Disjoint force-directed graph" type="UnsignedInteger" description="Number of vertices in the child group" default="200" />
            <property name="extraCount" label="Extra link count" category="Disjoint force-directed graph" type="UnsignedInteger" description="Number of extra groups of links to connect vertices" default="10" />

            <property name="colorScheme" label="Color scheme" category="Zoomable circle packing" type="Enumeration" description="The color scheme for the graph" default="schemePastel1">
              <options>
                <option>schemeCategory10</option>
                <option>schemeAccent</option>
                <option>schemeDark2</option>
                <option>schemeObservable10</option>
                <option>schemePaired</option>
                <option>schemePastel1</option>
                <option>schemePastel2</option>
                <option>schemeSet1</option>
                <option>schemeSet2</option>
                <option>schemeSet3</option>
                <option>schemeTableau10</option>
              </options>
            </property>
          </properties>
        </propertyInput>
      </left>
      <right>
        <tabLayout id="1074ec49-5cd1-4b57-80f6-a8ab5e52065b" tabPosition="Top">
          <pages>
            <page title="Scatterplot">
              <webView id="ec8a532a-d2e6-4010-9b30-dd40aa29ae8d" contentType="Content" loadDataAt="Default">
                <!-- Modified from D3 example at https://observablehq.com/@d3/scatterplot-tour -->
                <input>
                  <param id="a1cfcb16-b339-4408-9a9c-a51cfe80b394" name="randomSigma"/>
                  <param id="251531e3-915d-4947-bb75-5e125c9ca5f4" name="xoffset"/>
                  <param id="ad9d1da1-2369-4aaa-83d5-9325f9ddced5" name="yoffset"/>
                  <param id="b448e0c8-924e-4b15-b1ad-4efff6735357" name="pointCount"/>
                </input>
                <data showProgress="false">
                  <script type="lua">
                    <![CDATA[
return [[
<div style="display:block;">
  <svg id="container" style="width: 100%; cursor: pointer;"></svg>
</div>
<script type="text/javascript">
const svg = d3.select('#container');
const borderDelta = document.documentElement.clientWidth - svg.node().clientWidth + 4;
function getWidth() { return document.documentElement.clientWidth - borderDelta; }
function getHeight() { return document.documentElement.clientHeight - borderDelta; }

const g = svg.append("g").attr("stroke-linecap", "round").attr("stroke-width", 5);
var data = [];
var color = null;

window.onresize = function(event)
{
  var graphWidth = getWidth();
  var graphHeight = getHeight();
  svg.attr("width", graphWidth).attr("height", graphHeight)
    .attr("viewBox", [- graphWidth / 2, - graphHeight / 2, graphWidth, graphHeight])
  if (g && data && data.length > 0)
  {
    g.selectAll("path").data(data).join("path")
      .attr("d", d => "M" + (d[0] * graphWidth / 2) + "," + (d[1] * graphHeight / 2) + "h0")
      .attr("stroke", d => color(d[2]));
  }
};

const sigma = {randomSigma};
const xoffset = {xoffset};
const yoffset = {yoffset};
const count = {pointCount};
const random = d3.randomNormal(0, sigma);

data = [].concat(
  Array.from({length: count}, () => [random() + xoffset, random() - yoffset, 0]),
  Array.from({length: count}, () => [random() - xoffset, random() - yoffset, 1]),
  Array.from({length: count}, () => [random() + xoffset, random() + yoffset, 2]),
  Array.from({length: count}, () => [random() - xoffset, random() + yoffset, 3])
);
color = d3.scaleOrdinal().domain(data.map(d => d[2])).range(d3.schemeCategory10);

window.onresize();
</script>
]]
                    ]]>
                  </script>
                </data>
                <scripts>
                  <file>https://d3js.org/d3.v7.min.js</file>
                </scripts>
              </webView>
            </page>
            <page title="Disjoint force-directed graph">
              <webView id="4c2af572-c01d-4bbe-8dbe-4794592acec5" contentType="Content" loadDataAt="Default">
                <!-- Modified from D3 example at https://observablehq.com/@d3/disjoint-force-directed-graph/2 -->
                <input>
                  <param id="a60d3981-4e59-43c0-894b-6cd3cd4c39c9" name="parentCount"/>
                  <param id="54620bb9-8401-47f7-927f-be033e863f8b" name="childCount"/>
                  <param id="ad0ad3cd-6c00-4052-9cd2-9ca7addedf9c" name="extraCount"/>
                </input>
                <data showProgress="false">
                  <script type="lua">
                    <![CDATA[
return [[
<div style="display:block;">
  <svg id="container" style="width: 100%; cursor: pointer;"></svg>
</div>
<script type="text/javascript">
const parentBase = 1000;
const parentCount = {parentCount};
const childCount = {childCount};
const childBase = Math.floor((parentBase + parentCount) / parentBase + 1) * parentBase;
const extraCount = {extraCount};

const svg = d3.select('#container');
const borderDelta = document.documentElement.clientWidth - svg.node().clientWidth + 4;
function getWidth() { return document.documentElement.clientWidth - borderDelta; }
function getHeight() { return document.documentElement.clientHeight - borderDelta; }

const linkGroup = svg.append("g").attr("stroke", "#999").attr("stroke-opacity", 0.6);
const nodeGroup = svg.append("g").attr("stroke", "#fff").attr("stroke-width", 1.5);
const color = d3.scaleOrdinal(d3.schemeCategory10);

window.onresize = function(event)
{
  var graphWidth = getWidth();
  var graphHeight = getHeight();
  svg.attr("width", graphWidth).attr("height", graphHeight)
    .attr("viewBox", [- graphWidth / 2, - graphHeight / 2, graphWidth, graphHeight])
}

var data = GenerateDataForForceSimularion(parentBase, parentCount, childBase, childCount, extraCount);
simulation = d3.forceSimulation(data.nodes)
  .force("link", d3.forceLink(data.links).id(d => d.id))
  .force("charge", d3.forceManyBody())
  .force("x", d3.forceX())
  .force("y", d3.forceY());
var links = linkGroup.selectAll("line").data(data.links)
  .join("line").attr("stroke-width", d => Math.sqrt(d.value));
var nodes = nodeGroup.selectAll("circle").data(data.nodes)
  .join("circle").attr("r", 5).attr("fill", d => color(d.group));
nodes.append("title").text(d => d.id);
nodes.call(d3.drag()
  .on("start", onForceSimulationDragStarted)
  .on("drag", onForceSimulationDragged)
  .on("end", onForceSimulationDragEnded));
  
simulation.on("tick", () => {
  links.attr("x1", d => d.source.x).attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x).attr("y2", d => d.target.y);
  nodes.attr("cx", d => d.x).attr("cy", d => d.y);
});
  
window.onresize();
</script>
]]
                    ]]>
                  </script>
                </data>
                <scripts>
                  <file>https://d3js.org/d3.v7.min.js</file>
                  <file path="View">d3-sample-support.js</file>
                </scripts>
              </webView>
            </page>
            <page title="Zoomable circle packing">
              <webView id="b93df36a-d37b-45c4-82a4-77e7a8794a88" contentType="Content" loadDataAt="Visualizing">
                <!-- Modified from D3 example at https://observablehq.com/@d3/zoomable-circle-packing?intent=fork -->
                <input>
                  <param id="43121e3c-98b7-4d3c-95e1-cf09f215eeb4" name="colorScheme"/>
                </input>
                <data showProgress="false">
                  <script type="lua">
                    <![CDATA[
return [[
<div style="display:block;">
  <svg id="container" style="width: 100%; cursor: pointer;"></svg>
</div>

<script type="text/javascript">
const svg = d3.select('#container');
const borderDelta = document.documentElement.clientWidth - svg.node().clientWidth + 4;
function getWidth() { return document.documentElement.clientWidth - borderDelta; }
function getHeight() { return document.documentElement.clientHeight - borderDelta; }
function getColor(index)
{
  var schemes = [ d3.schemeCategory10, d3.schemeAccent, d3.schemeDark2, d3.schemeObservable10, d3.schemePaired,
    d3.schemePastel1, d3.schemePastel2, d3.schemeSet1, d3.schemeSet2, d3.schemeSet3, d3.schemeTableau10 ];
  return (index >= 0 && index < schemes.length) ? schemes[index] : schemes[0];
}

const color = d3.scaleOrdinal(getColor({colorScheme}));
svg.attr("style", "background: " + color(0) + ";");
svg.on("click", (event) => zoom(event, root));

const pack = data => d3.pack().size([getWidth(), getHeight()]).padding(3)(d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value));
const root = pack(data);
const node = svg.append("g").selectAll("circle").data(root.descendants().slice(1))
  .join("circle")
    .attr("fill", d => d.children ? color(d.depth) : "white")
    .attr("pointer-events", d => !d.children ? "none" : null)
    .on("mouseover", function() { d3.select(this).attr("stroke", "#000"); })
    .on("mouseout", function() { d3.select(this).attr("stroke", null); })
    .on("click", (event, d) => focus !== d && (zoom(event, d), event.stopPropagation()));
const label = svg.append("g").style("font", "10px sans-serif").attr("pointer-events", "none").attr("text-anchor", "middle")
  .selectAll("text")
  .data(root.descendants())
  .join("text")
    .style("fill-opacity", d => d.parent === root ? 1 : 0)
    .style("display", d => d.parent === root ? "inline" : "none")
    .text(d => d.data.name);

window.onresize = function(event)
{
  var graphWidth = getWidth();
  var graphHeight = getHeight();
  svg.attr("width", graphWidth).attr("height", graphHeight)
    .attr("viewBox", [- graphWidth / 2, - graphHeight / 2, graphWidth, graphHeight])
  zoomTo([focus.x, focus.y, focus.r * 2]);
}

let focus = root;
let view;

function zoomTo(v)
{
  const k = getWidth() / v[2];
  view = v;

  label.attr("transform", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);
  node.attr("transform", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);
  node.attr("r", d => d.r * k);
}

function zoom(event, d)
{
  focus = d;
  const transition = svg.transition()
    .duration(event.altKey ? 7500 : 750)
    .tween("zoom", d => {
      const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);
      return t => zoomTo(i(t));
    });
  label.filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
    .transition(transition)
      .style("fill-opacity", d => d.parent === focus ? 1 : 0)
      .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
      .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
}

window.onresize();
</script>
]]
                    ]]>
                  </script>
                </data>
                <scripts>
                  <file>https://d3js.org/d3.v7.min.js</file>
                  <file path="View">d3-zoomable-circle.js</file>
                </scripts>
              </webView>
            </page>
          </pages>
        </tabLayout>
      </right>
    </splitLayout>
  </view>

  <procedures />
  <launchers />
  
  <dataFlow>
    <mapping source="7a7270d8-85be-4147-af41-d3e87608f222" target="a1cfcb16-b339-4408-9a9c-a51cfe80b394"/>
    <mapping source="3a06bfd0-dac5-4bbd-8435-bb1b508dd978" target="251531e3-915d-4947-bb75-5e125c9ca5f4"/>
    <mapping source="161452d1-8a86-40ae-bd01-20c2421ae06c" target="ad9d1da1-2369-4aaa-83d5-9325f9ddced5"/>
    <mapping source="87470081-1148-4d44-95a9-7fcb1962df03" target="b448e0c8-924e-4b15-b1ad-4efff6735357"/>

    <mapping source="39fe7122-5109-4fab-95aa-5a061a0c34b9" target="a60d3981-4e59-43c0-894b-6cd3cd4c39c9"/>
    <mapping source="56b0fb38-2bae-42f6-84ea-e83228fbce20" target="54620bb9-8401-47f7-927f-be033e863f8b"/>
    <mapping source="076382fd-b6e8-413f-b84a-42974f4c92fc" target="ad0ad3cd-6c00-4052-9cd2-9ca7addedf9c"/>

    <mapping source="9bd179e7-26ec-4ed8-b4b0-bef737203e14" target="43121e3c-98b7-4d3c-95e1-cf09f215eeb4"/>
  </dataFlow>

</LsbView>
