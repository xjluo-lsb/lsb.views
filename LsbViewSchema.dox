////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\mainpage Leave Script Behind Explained

This is the main document for Leave Script Behind (aka LSB). It includes introduction on how to use the LSB application, schema of LSB view files, how to create new LSB views, how to debug and publish LSB view files, as well as answers for a list of frequently asked questions.

- \ref section_intro
- Using LSB
  - \ref section_ui
  - \ref section_settings
  - \ref section_views
  - \ref section_wrapper_script
- Use LSB in a better way
  - \ref section_smart_time
  - \ref section_smart_filter
- Schema - this section explains the schema for the LSB view files,
  - \ref section_enum
  - \ref section_data
  - \ref section_view
  - LsbView
- Create your own LSB view
  - \ref section_create_view
  - \ref section_debug_view
- \ref section_faq
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_intro Introduction

# Welcome to Leave Script Behind (LSB)!

Leave Script Behind (aka LSB) is a tool developed mainly for developers.

Since from the invention of the Internet, more and more services are moved to the online world. This implies that developers are now working in the DevOps mode, they inevitably need to work with shells and command line tools for their daily work, from product rollout to live site investigation/mitigation. Depends on which %OS they are using on their devbox, they may need to interact with different types of command-line shells, such as **PowerShell** on **Windows**, __GNU bash__ on **Linux**, and __zsh__ on **Mac %OS X**, etc.

The shells are known as providing capabilities to allow user to run commands/programs on operating systems, and allow users to create scripts to chain commands as needed to complete complicated tasks, and then repeat the same work later by simply run the script solely. Along with the flexibility and great power come with the shells, there is also a steep learning curve for new users to master all the knowledge needed to achieve what they want to do, from learning the different commands provided by the shell(s), to mastering the usage of each command, including various parameters, unique parameter values, combinations of the parameters, as well as how to write scripts in correct syntax. Besides, both the shell input and output are usually presented in plain text in the shell console, which implies that users must have knowledge beforehand to understand the restricted output in plain text. There is no way for user to interact with the result data after it's outputted in the shell console in plain text, unless user re-runs the command and stores the result into a variable in a shell supported way, then user may manipulate the variable to digest more.

LSB is a cross-platform tool designed with the goal to reduce the pain - it chains multiple sequences of shell commands to complete a complicated task, with user interactions allowed in the middle through GUI, provides a way to store and reuse the views later for the same tasks. It can display the data output from command(s) at each step in a manipulatable way, user can interact with the data to create the input for the next step (the next sequence of commands), and so on, step by step, till the workflow reaches its end. By reusing the LSB views, it can greatly ease the user's life by avoiding remembering all the shell commands needed, their parameters used, and error-prone parameter combinations. Each LSB view provides funtionality similiar to a script file but offers richer capabilities such as,
- Data visualizaion through various views like list view, tree view, chart view and many other data view controls.
- Interaction with the intermediate data, select different data entry to continue the workflow with different logic and actions.
- Multiple input controls for users to input values in different types, from integer, string, to files, etc.
- Layout capability to arrange the input controls and data view controls through simple XML configuration.
- Embedded support for data connectivity to SQL databases, Web APIs, etc. with configuration defined in the view file.
- Lua language intergation in LSB for data generation and task execution.
- Extensibility to support any shell type that the host %OS supports for running shell scripts to implement functionalities.
- Ability to mix multiple script snippets in the same type or different types (e.g., Lua, PowerShell, bash, zsh) in the same view to complete tasks.

With these capabilities, LSB can help to address the user's pain points,
- It reduces the effort required for users to learn various script languages and commands. End users only need to learn how to use LSB views to complete tasks, without needing to know the underlying commands and scripts, as the GUI views are more intuitive than their command line counterparts. For developers, LSB views can be implemented using their preferred shells/languages, and they can also mix different shells within a single view to create the most effective workflow.
- It significantly enhances the experience on how the end users can interact with the intermediate data generated from a set of commands,
  - Allow users to view the data in well-organized formats like list view, tree view, etc.
  - Enable data visualization in various graph types, including but not limited to bar charts, pie charts, histograms, and heat maps.
  - Allow users to select data entries as input for subsequent workflow steps.
- The Lua language embedded within LSB ensures cross-platform compatibility. By utilizing only Lua scripts within a LSB view, this view can operate seamlessly across all platforms, including Windows, Linux, and Mac OS X.
- Uploading a LSB view to the LSB repository makes it accessible to all LSB users, allowing any user to reuse the views created by others effortlessly. This is also an easy way for the view developers to pushlish their work, and get acknowledged by other developers and users.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_ui The LSB UI

The LSB application features a multiple window MDI (Multiple Document Interface). Initially, it launches with just the main window. When an user opens a LSB view file, it appears in its own separate window. If the user opens the same view file again, a new window is created for that new instance. Regardless of whether the view file is the same or different, each view instance always has its own dedicated window.

## 1. Main window

Here's how the main window looks like,

\image html lsb-main-window.png

### 1.1 Menu

#### 1.1.1 The **File** menu

\image html lsb-menu-file.png

<ul>
<li>**Open view ...** - This menu item launches the open view dialog for user to select a view file and open as LSB view.</li>
<li>**Open recent view** - Select a previously opened view file from the sub-menu and open as LSB view.</li>
<li>**Close all views** - This will close all the currently opened views.</li>
<li>**Manage view history ...** - This menu item launches the view file history management window to configure how the view files are ordered in the opened view history.</li>
<li>**Exit** - This closes all the LSB view windows and exits the LSB application.</li>
</ul>

#### 1.1.2 The **Windows** menu

\image html lsb-menu-windows.png

<ul>
<li>**Views** - This sub-menu contains a list of all currently opened LSB views. Selecting an entry in the sub-menu will bring the corresponding LSB view into front and make it the active view.</li>
<li>**Global log window** - This menu item brings the global logging window into front. The global logging window logs the view open/close events and all the application level events.</li>
</ul>

#### 1.1.3 The **Option** menu

\image html lsb-menu-option.png

<ul>
<li>**Settings ...** - This is the only menu item in this menu. It launches the LSB settings dialog for user to change configurations for the LSB application, from generic settings to shell configurations and view repository configurations.</li>
</ul>

#### 1.1.4 The **Help** menu

\image html lsb-menu-help.png

<ul>
<li>**Help ...** - This shows the help content for the LSB application, including the content you are reading now.</li>
<li>**%About ...** - This shows the about information for the LSB application.</li>
</ul>

### 1.2 Toolbar Buttons

In the main window, there is also a toolbar that contains a set of buttons for the functionalities. The funtionalities provided by these buttons are already available through the menu items in the main menu.

\image html lsb-main-window.png

<ul>
<li>**Open view** - This button has the same functionality as the "Open view ..." menu item under **File** menu. Clicking the button will launch the open view dialog to select and open LSB view. Besides, the little triangle next to it triggers a drop down menu that shows the same view history as the **Open recent view** does.</li>
<li>**Close all views** - This button is same as the **Close all views** menu item under **File** menu, it closes all currently open LSB views.</li>
<li>**Manage history** - This is another entry to the view file history management window.</li>
<li>**View** - This button will launch the "Select view" dialog for user to select a view from a view list which contains all currently opened LSB views and make the selected view active. There is also a button with little triangle next to it which triggers a drop down menu that contains menu items mapped to all currently open views. Select a menu item here will bring the corresponding LSB view into front and make it active.</li>
<li>**Log window** - This button brings the global logging window into front.</li>
<li>**Settings** - This button launches the settings dialog for the LSB application.</li>
<li>**Help page** - This button shows the help window for the LSB application.</li>
<li>**%About LSB** - This button shows the about window for the LSB application.</li>

## 2. View window

A view window typically consists of at least four pages, **View**, **Logs**, **Lua** and **About**.

### 2.1 View

The **View** page displays content that is created based on the configurations in the LSB view file. Various controls, such as input controls and data view controls, are arranged using different layout controls inside a view. In this screenshot from the "Chart view sample," the root layout control is a tabLayout control, which consists of four tabs. Each tab uses a tableLayout control to organize four chartView controls into a 2x2 table, presenting different types of charts.

\image html lsb-view-view.png

### 2.2 Logs

The **Logs** page captures local logging, detailing all events within the LSB view instance. For example, each view control performs a condition check (defaulting to empty code, meaning the condition always returns a true value) to determine if the data source for the view control should be accessed and the content should be updated. The results of these condition checks are logged in the message list in the top. When an output parameter value changes in one view control and subsequently triggers an input parameter value change in another view control, both events are recorded in the parameter change list in the bottom. This feature assists view creators in debugging by verifying whether the correct parameter values are sent from a view control and properly transmitted to target view controls.

\image html lsb-view-logs.png

### 2.3 Lua

The **Lua** page contains Lua code snippets executed within the LSB view instance. Even if no explicit Lua script is used in the view, this page remains there due to implicit functions implemented in Lua that run from view loading to parameter checking. For instance, it automatically creates an `lsb` object (table) in the Lua runspace to share the view path, file, and name, etc. with other Lua code in the view. Each view control's conditions are also written in Lua only. The content on this page is read-only and displays the executed Lua code with syntax highlighting.

\image html lsb-view-lua.png

### 2.4 About

The **About** page displays information about the LSB view. The content on this page is configurable within the LSB view file and can be generated from the view file itself or linked directly to a web page available on the Internet.

\image html lsb-view-about.png

### 2.5 Other pages

If the view author uses shells like PowerShell, Bash, or Zsh to implement functionalities for the LSB view, new pages will be added for each type of shells used. This per shell page displays the executed shell scripts along with their outputs. Both the view author and end users can use this page to review the executed shell commands and their generated outputs.

## 3. Dialogs

### 3.1 Open a view dialog

The **Open a view** dialog helps user to find, select, and open an LSB view file within the LSB application. It consists of a view list and a preview pane. When user selects an LSB view from the view list, its corresponding information is displayed in the preview pane. The view list supports smart filter, see \ref section_smart_filter for more information. This enables user to quickly locate the view through combination of column based filters. When a view is selected, user may also click on the **Open the view folder** button to open the folder that contains the view file using the %OS native file management application, such as the **File Explorer** on Windows, **Safari** on Mac %OS X, etc.

\image html lsb-open-view.png

### 3.2 Manage opened view history

This is the dialog that manages how the view history is displayed.

\image html lsb-manage-history.png

<ul>
<li>**History count settings**
  <ul>
    <li>**Maximum item count in menu** - This configures how many items will be displayed in the view history menu.</li>
    <li>**Maximum item count in history file** - This configures how many items will have the history data stored in the history data file.</li>
  </ul>
</li>
<li>**How are the view files ordered**
  <ul>
    <li>**Most recently used time** - When this is selected, the view files are ordered by most recently used time</li>
    <li>**How many times view used** - When this is selected, the view files are ordered by how many times the view is used</li>
  </ul>
</li>
<li>**View file history** - This is a list of view files opened before. They are ordered based on setting configured above.</li>
</ul>

### 3.3 Select view

This dialog is launched when user clicks on the **View** button in the main toolbar. It shows the full list of currently open LSB views. If user selects a view from the list and clicks **OK** button, the selected view will be brought into front and become an active view.

\image html lsb-view-list.png

### 3.4 Settings

The LSB settings dialog is explained in the next section \ref section_settings.

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_settings The LSB Settings

The LSB settings dialog allows user to configure various aspects of the LSB application. The settings are organized into four categories: **General**, **Colors & Fonts**, **Shells**, and **Views**. Refer to the following sections to learn about each setting and understand how they affect the behavior of the LSB application.

## General

This is the general setting category for LSB. The settings included in this category are,

\image html lsb-settings-general.png

<ul>
<li>**Aggregation time window for multiple input parameter changes** - This defines the length of a time window in milliseconds. For an LSB view control, there might be multiple input parameters, and several of these parameters might have their values changed simultaneously (or within a very short time frame). If this time window length is set to 0, every parameter value change will trigger a data load and content refresh in the view control, which is generally not the expected behavior. By setting this time window to a short duration, all parameter value changes occurring within this window will be recognized as one action, triggering a single data load and content refresh. Please note that this time window is a moving window. For instance, if the time window length is set to D and the first input parameter value changes at T0, and a second parameter changes at T1 (where T1 - T0 <= D), these two input parameter changes will be recognized as one action, and the actual data load/content refresh will be triggered at T1 + D. If there is a third parameter value changes at T2 where T2 - T1 <= D, then the action will deferred again to T2 + D, until no parameter value change happens within the D duration after the last parameter value change. In general, if n parameters have their values changed around the same time (with the time gap between each adjacent two parameters being less than D), the actual data load/content refresh will happen at Tn + D.
<li>**Default view size** - This defines the default window size for LSB view. When a LSB view is open, it will be set to this size by default.</li>
<li>**Show the GIT client window during execution for enlistment or refresh** - The LSB application uses GIT to synchronize the default view repository, the help document repository, as well as other user configured view repositories. It calls the `git` command to get the files synced. This setting controls if a console window is shown during the synchronization.</li>
</ul>

## Color & Fonts

This category contains the configurations for LSB UI, including colors and fonts, etc.

\image html lsb-settings-ui.png

<ul>
<li>**Active view caption** - This setting allows user to configure the colors and font for the caption of active view controls. Users can click on the foreground or background color to change them, and click on the "Choose..." button to select the font for the active view control. The Preview control will display the final effect of any changes made to these configurations.


This configures the colors and font for the caption for the active view controls. User may click on the foreground color, background color to chage the colors, and click on the "Choose..." button to select the font for the active view control. The Preview control will show the final effect for any changes made on these configurations.</li>
<li>**Inactive view caption** - This configures the colors and font for the caption for the inactive view controls. It can be changed and previewed in the same way as the active view caption does.</li>
<li>**Shell window content** - This is the setting for the shell window content. When a shell window is needed, such as the GIT console window mentioned above for the view synchronization, it will be displayed with the colors and font configured here. The settings can be changed and previewed in the same way as the active view caption and inactive view caption.</li>
</ul>

## Shells

This category allows the user to configure the shells used in LSB views. The page consists of a shell list and a set of tool buttons that manage the shell list.

\image html lsb-settings-shells.png

Here are the tool buttons,
<ul>
<li>**Scan** - This scans shells in the host Operating System. The found shells will be added into the shell list automatically with default settings.</li>
<li>**Edit** - This button is enabled only if an item in the shell list is selected. Clicking on the button will trigger the shell setting editor dialog to change the settings for the selected shell. See the "Shell Settings Editor" section below for the more details on how to customize the settings for a shell.</li>
<li>**Add** - This adds a new shell into the shell list. It launches the shell setting editor dialog with empty settings for the new shell to be added.</li>
<li>**Delete** - This deletes the currently selected shell from the shell list. It's only enabled if a shell item is selected in the shell list.</li>
<li>**Clear** - This button removes all shells from the shell list.</li>
</ul>

__Note__: Double click on an item in the shell list has the same effect as clicking the **Edit** button - it launches the shell setting editor dialog for futher customization on the shell settings.

### Shell Settings Editor

This is the dialog used for creating and editing the settings for a shell to be used within the LSB application. The LSB views can execute shell scripts only if the corresponding shell setting exists, which must be created using this dialog.

\image html lsb-shell-editor.png

Here are the settings user can set for a shell,
<ul>
<li>**Name** - Name of the shell. This value becomes the shell type in the view associated with any shell scripts.</li>
<li>**Path** - The path to the shell executable</li>
<li>**Reference / Module list** - This is is a list of shell script files. These files will be automatically loaded into the corresponding shell when the shell process is created, so the scripts in these files will be executed before any other scripts defined in the LSB view file. The shell scripts defined in the LSB view file can use the variables and functions created in these references or modules.</li>

<li>**Placeholders** - These are placeholders to be used in the script wrapper which will be replaced by actual values before script execution. They are used to help the execution of the user specified script in the shell process, and collect data back to the LSB application.
  <ul>
    <li>**Customized user script** - This is the placeholder for the shell script defined in the LSB view file.</li>
    <li>**Intermediate data file** - This is the placeholder for the intermediate data file full path to store the data output from the user scripts defined in the LSB view file. The LSB application will try to load the script generated data from this intermediate data file and use the data in the LSB view.</li>
    <li>**First half of signature** - To detect the completion of the wrapper script execution in the shell process, the LSB uses randomly generated signature data that is split into two parts. These parts are combined and output as a complete signature at the end of the wrapper script. When LSB finds the full signature in the shell output, it knows that the script execution is complete. By splitting the signature into two parts, it ensures that no other part of the script contains/outputs the full signature, preventing LSB from mistakenly thinking the script execution is complete before the last step in the wrapper script. This placeholder is for the first half of the signature data.</li>
    <li>**Second half of signature** - This is placeholder for second half of the randomly generated signature data. It's used together with the first half of signature to form the complete signature.</li>
    <li>**Path to view file** - This is the placeholder for the full path to the currently open view file.</li>
  </ul>
</li>
<li>**User script wrapper** - This script wraps the user-defined script in an LSB view to be executed in the shell process. The wrapper script facilitates outputting data generated from the user-defined script into an intermediate data file, generating signature data, and outputting the signature data to the shell console to determine script completion. It can also add any other helper functions needed for the user script execution.</li>
<li>**Script execution timeout** - This is the default timeout setting for the user script execution. Each user defined script could have its own customized timeout set through the script data source configuration, see ScriptData.</li>
</ul>

## Views

This category allows users to configure the view repositories used in LSB. Similar to the Shells, this page consists of a view repository list and a set of tool buttons that manage the view repository list.

\image html lsb-settings-views.png

Here are the tool buttons,
<ul>
<li>**Edit** - This button is enabled only if a view repository is selected in the repository list. Clicking on the button will open the view repository editor dialog to update the settings for the LSB view repository. See section below for the details of how to customize the settings for a view repository.</li>
<li>**Synchronize** - If the currently selected view repository is a GIT repository and the remote GIT repository URL is provided, this button will be enabled. Clicking on the button will trigger the synchronization of the view files (from the remote GIT repository to the local enlistment).</li>
<li>**Add** - This is to add a new view repository into the repository list. It launches the view repository setting dialog with empty settings for the new view repository.</li>
<li>**Delete** - This deletes the currently selected view repository from the repository list. The button is enabled only if a view repository item is selected in the view repository list. </li>
<li>**Clear** - This removes all view repositories from the repository list.</li>
</ul>

### View Repository Editor

When user requests to add a new LSB view repository or edit an existing view repository, this editor dialog is launched for customizing the settings for the view repository.

\image html lsb-view-repository-editor.png

Here are the settings can be customized for a view repository though this dialog,
<ul>
<li>**Name** - Name of the LSB view repository</li>
<li>**Local view root** - This is the local path to the root folder of the view repository.</li>
<li>**GIT repository URL** - If a view repository is synchronized from a remote GIT repository, this is the GIT repository URL. If it's empty, then the view repository becomes a local repository, no synchronization will be executed for it.</li>
<li>**Refresh interval** - This setting is only applicable if the view repository is synchronized from a remote GIT repository. It controls the frequency of synchronization between the LSB local enlistment and the remote GIT repository. Please note that automatic synchronization only occurs when LSB is launched. Additionally, manual synchronization by clicking the Synchronize button in the Views configuration page does not adhere to this interval setting; it performs the synchronization immediately when the button is clicked.</li>
<li>**The repository is enabled to use the views hosted in it** - This is a switch that controls if the LSB views in this view repository should be visible in the open view dialog or not.</li>
</ul>

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_views The LSB Views and View Repositories

The LSB application comes with a set of sample views. There could be many more views added by the author and users. These views will be managed through GIT repositories.

## Sample Views

## Default View Repository

The LSB applciation comes with a default view repository that is available at https://github.com/xjluo-lsb/lsb.views. When the LSB is launched, if the default view repository is not available, LSB will automatically clone the repository and make the views available to user. The view repository will be named as DefaultViews. This view repository is automatically configured and available in the view repository configuration dialog.

## User Defined Repositories

Users may also define their own repositories to be used in the LSB. As described in the **View Repository Editor**, user may configure a local only repositor by pointing the local view root to a local folder but not providing a GIT repository URL. In this case, all the views are available locally and not shared with others.

In the other case, user may also configure a remote view repository by providing both the GIT repository URL and local view root folder. In this case, the content in the GIT repository will be automatically synced to the local folder every time the LSB applciation is launched. In this way, user may easily reuse the LSB views created by others or share the views s/he created with others.

For community version, users are allowed to use the default view repository which syncs from the repository hosted on GitHub. Besides, user may add one local repository for creating and managing his/her own views. It's not supported to add neither remote repositories nor more than one local repositories. For the paid version, there is no limitation. User may add as many remote repositories as the user wants, all these repositories will be automatically synced during the launch of LSB. User may also add as many local repositories as the user wants, though this might be not a strong need.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_enum Enumeration Types

In this page, it lists all enumeration types that define the values for attributes in data classes and view controls in the LSB views.

@{
*/

//! \brief This is the enumeration type for specifying the content type for the about node in LSB views.
/*!
This is used for the about information for the LSB views. The supported values are,
*/
enum class AboutDataType
{
  None,     //!< The about content is not specified. The about information will be generated from the settings for the LSB view.
  Content,  //!< The content for about information is directly specified as the content of the about node.
  Url       //!< The about node content is an URL to a Web page for the about information.
};

//! \brief This is the enumeration type for chart type used for the attribute chartType in the ChartView.
/*!
It defines the chart type displayed in the ChartView. The supported values are,
*/
enum class ChartType
{
  BarChart,            //!< This is value for displaying bar chart in the chart view control.
  StackedBarChart,     //!< This is value for displaying stacked bar chart in the chart view control.
  ColumnChart,         //!< This is value for displaying column chart in the chart view control.
  StackedColumnChart,  //!< This is value for displaying stacked column chart in the chart view control.
  BoxPlot,             //!< This is value for displaying box plot in the chart view control.
  CandlestickChart,    //!< This is value for displaying candlestick chart in the chart view control.
  OhlcChart,           //!< This is value for displaying OHLC chart in the chart view control.
  PieChart,            //!< This is value for pie bar chart in the chart view control.
  DoughnutChart,       //!< This is value for displaying doughnut chart in the chart view control.
  PolarAreaChart,      //!< This is value for displaying polar area chart in the chart view control.
  BubbleChart,         //!< This is value for displaying bubble chart in the chart view control.
  ScatterPlot,         //!< This is value for displaying scatter plot in the chart view control.
  Math2dPlot,          //!< This is value for displaying math 2D plot in the chart view control.
  LineChart,           //!< This is value for displaying line chart in the chart view control.
  AreaChart,           //!< This is value for displaying area chart in the chart view control.
  Histogram,           //!< This is value for displaying histogram in the chart view control.
};
	  
//! \brief This is the enumeration type for attribute contentType that is used in WebView.
/*!
It indicates the content type returned from the data source defined for the control. The supported values are,
*/
enum class ContentType
{
  Url,      //!< The page should be loaded from the URL returned from the data source.
  Content,  //!< The page should be loaded from the raw content returned from the data source.
  File      //!< The page should be loaded from the files defined.
};

//! \brief This is the enumeration type for the view parameter direction.
/*!
This type is used internally in the Leave Script Behind code, not directly used in the LSB views. The supported values are,
*/
enum class Direction
{
  Input,    //!< The parameter is used as input parameter for the view control.
  Output    //!< The parameter is used as output parameter for the view control.
};

//! \brief This is the enumeration type for the attribute dock in the Button control.
/*!
It defines how the button will be docked in the space reserved for it. The supported values are,
*/
enum class DockStyle
{
  None,     //!< This means the button is not docked, it will have its default size.
  Left,     //!< This means the button is docked to left of the space, taking full height of space and keep the default width.
  Top,      //!< This means the button is docked to top of the space, taking full width of space and keep the default height.
  Right,    //!< This means the button is docked to right of the space, taking full height of space and keep the default width.
  Bottom,   //!< This means the button is docked to bottom of the space, taking full width of space and keep the default height.
  Fill      //!< This means the button will take the whole space. This indirectly provides the capability to control the button size through the layout control.
};

//! \brief This is the enumeration type that defines the values that control when the script hooked with Procedure(s) will be executed.
/*!
It defines when a Procedure executes the script associated with it, depending on the value specified. The supported values are,
*/
enum class WhenToExecute
{
  ParameterChanging,      //!< The script is kicked off when input parameter(s) is changed
  OneShotInitializing,    //!< The script is kicked off when the procedure is initialized and is executed once only
  TimerTicking,           //!< The script is kicked off each time the timer approches the interval
  TimerStartAndTicking    //!< The script is kicked off when timer is started and approches interval
};

//! \brief This is the enumeration type used for the fixedView attribute in the SplitLayout.
/*!
It indicates which pane in the SplitLayout control has fixed size. The supported values are,
*/
enum class FixedView
{
  None,     //!< None of the two panes have fixed size, i.e. both panes are resizable when the view window resizes.
  Left,     //!< The left pane in the split layout control has fixed size, i.e. it does not resize when the view window resizes.
  Right,    //!< The right pane in the split layout control has fixed size.
  Top,      //!< The top pane in the split layout control has fixed size.
  Bottom    //!< The bottom pane in the split layout control has fixed size.
};

//! \brief This is the enumeration type for standard font families.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#a0cd7bfd21a4f901245d3c86d8ea0c080">wxFontFamily</a> on the wxWidgets
Web site for more details. The supported values are,
*/
enum class FontFamily
{
  Default,      //!< A default font.
  Decorative,   //!< A decorative font.
  Roman,        //!< A formal, serif font.
  Script,       //!< A handwriting font.
  Swiss,        //!< A sans-serif font.
  Modern,       //!< A fixed pitch font.
  Teletype      //!< A teletype (i.e. monospaced) font.
};

//! \brief This is the enumeration type for font styles.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#ab8f87d0b928ad1f8cba7d1c01f5f7a55">wxFontStyle</a> on the wxWidgets
for more details. The supported values are,
*/
enum class FontStyle
{
  Normal,       //!< The font is drawn without slant.
  Italic,       //!< The font is slanted in an italic style.
  Slant         //!< The font is slanted, but in a roman style.
};

//! \brief This is the enumeration type for font weight.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#a7cc37d08c7e84370f4fcc175b557a022">wxFontWeight</a> on the wxWidgets
for more details. The supported values are,
*/
enum class FontWeight
{
  Thin,         //!< Thin font (weight = 100).
  ExtraLight,   //!< Extra Light (Ultra Light) font (weight = 200).
  Light,        //!< Light font (weight = 300).
  Normal,       //!< Normal font (weight = 400).
  Medium,       //!< Medium font (weight = 500).
  SemiBold,     //!< Semi Bold (Demi Bold) font (weight = 600).
  Bold,         //!< Bold font (weight = 700).
  ExtraBold,    //!< Extra Bold (Ultra Bold) font (weight = 800).
  Heavy,        //!< Heavy (Black) font (weight = 900).
  ExtraHeavy    //!< Extra Heavy font (weight = 1000).
};

//! \brief This is the enumeration type used for the align attribute in the Column.
/*!
It indicates how the content in the column will be aligned horizontally. The supported values are,
*/
enum class HorizontalAlignment
{
  Center,       //!< The content in the column will be center aligned.
  Left,         //!< The content in the column will be left aligned.
  Right         //!< The content in the column will be right aligned.
};

//! \brief This is the enumeration type used for the method attribute in the WebData.
/*!
It indicates which HTTP method should be used for the web request to download data for the view control. The supported values are,
*/
enum class HttpMethod
{
  Get,      //!< The web request uses GET method to download data from web endpoint.
  Post,     //!< The web request uses POST method to download data from web endpoint.
};

//! \brief This is the enumeration type for known paths for file references.
/*!
The known paths are all relative to the LSB applciation folders. Specify None to use any raw URL or path.The supported values are,
*/
enum class KnownPath
{
  None,     //!< It's not using any known path, the content is raw URL.
  View,     //!< The path is pointint to the view folder.
  Libs,     //!< The path is pointing to the libs folder.
  Data,     //!< The path is pointing to the data folder.
  Temp      //!< The path is pointing to the temp folder.
};

//! \brief This is the enumeration type for the chart line types.
/*!
The supported values are,
*/
enum class LineType
{
  Straight, //!< Straight line is used for drawing the lines in ChartView.
  Stepped   //!< Stepped line is used for drawing the lines in ChartView.
};

//!< \brief This is the enumeration type for the view attribute loadDataAt.
/*!
This attribute indicates when to load data for a view control. The supported values are,
*/
enum class LoadDataAt
{
  Default,      //!< Data for the view will be loaded when there is change in the input parameters.
  Creating,     //!< Data for the view will be loaded when the view is created.
  Visualizing   //!< Data for the view will be loaded when the view becomes visible for the first time.
};
  
//! \brief This is the enumeration type used for the activation attribute of OutputParameter,
/*!
It indicates which operation would trigger the ouput parameter value changed event and send out the changed parameter values.
The supported values are,
*/
enum class OperationType
{
  Default,      //!< The default operation on the view control, which is same to Selecion.
  Selection,    //!< When item or content is selected in the view control, it will trigger the OutputParameter changed event.
  Activation,   //!< The activation operation in the view control, which is same to DoubleClick.
  DoubleClick   //!< When item in view control is double clicked, it will trigger the OutputParameter changed event.
};
  
//! \brief This is the enumeration type used for the orientation attribute in the SplitLayout.
/*!
It indicates the layout direction of the two panes in the SplitLayout. The supported values are,
*/
enum class Orientation
{
  Horizontal,   //!< The two panes are placed horizontally, one in left and one in right.
  Vertical      //!< The two panes are placed vertically, on in top and one in bottom.
};
  
//! \brief This is the enumeration type for the attribute type in the PropertyField configuration.
/*!
It defines which value type is used for the property definition. The supported values are,
*/
enum class PropertyValueType
{
  Boolean,          //!< The value is in boolean type.
  Flags,            //!< The value is a flags value, which means multiple bits value with each bit as a flag value.
  Float,            //!< The value is a float value.
  Integer,          //!< The value is an integer value.
  UnsignedInteger,  //!< The value is an unsigned integer value.
  String,           //!< The value is a string value.
  Password,         //!< The value is a string value for password.
  ArrayString,      //!< The value is a string array.
  LongString,       //!< The value is a multiple line string value.
  Enumeration,      //!< The value is in an enumeration type.
  MultiChoice,      //!< The value allows selection from multiple values.
  Date,             //!< The value is a date value.
  Font,             //!< The value is a font value.
  Cursor,           //!< The value is a cursor.
  Color,            //!< The value is a color.
  SystemColor,      //!< The value is one of the system colors.
  File,             //!< The value is a file.
  ImageFile,        //!< The value is an image file.
  Folder            //!< The value is a folder.
};

//! \brief This is the enumeration type for defining the size type of table rows and table columns.
/*!
It defines how the actual size of table row or table column are calculated. The supported values are,
*/
enum class SizeType
{
  absolute,     //!< The size is specified as absolute pixels.
  percentage    //!< The size is specified as percentage of totoal size.
};
  
//! \brief This is the enumeration type used for the tabPosition attribute in the TabLayout.
/*!
It indicates the position of the tab bar in the TabLayout. The supported values are,
*/
enum class TabPosition
{
  Top,      //!< The tab bar will be put at the top of the tab layout control. This is the default value.
  Bottom,   //!< The tab bar will be put at the bottom of the tab layout control.
  Left,     //!< The tab bar will be put at the left side of the tab layout control.
  Right     //!< The tab bar will be put at the right side of the tab layout control.
};
  
//! \brief This is the enumeration type used in the InputParameter to indicate what kind of changes happened to the InputParameter.
/*!
These flags are implemented as properties on the parameters available in Lua script. The supported values are,
*/
enum class TriggerFlags
{
  IsNull,       //!< The input parameter value is null.
  IsEmpty,      //!< The input parameter value is an empty string.
  IsWhiteSpace, //!< The input parameter value contains whitespace only, not an empty string.
  IsTrue,       //!< The input parameter value is boolean value true.
  IsFalse,      //!< The input parameter value is boolean value false.
  IsZero,       //!< The input parameter value is 0.
  IsPositive,   //!< The input parameter value is a positive value, greater than 0.
  IsNegative,   //!< The input parameter value is a negative value, less than 0.
  IsMatched,    //!< The input parameter value matches the specified regular expression pattern for the parameter.
  IsChanged,    //!< The input parameter value is changed.
  IsTrigger     //!< The input parameter is the one triggered the check.
};
  
//! \brief This is the enumeration type of how to trim spaces in a string value.
/*!
The supported values are,
*/
enum class TrimSpace
{
  None,     //!< The string value won't be trimmed.
  Left,     //!< Only the left end spaces in the string will be trimmed.
  Right,    //!< Only the right end spaces in the string will be trimmed.
  Both      //!< Both left and right end spaces in string will be trimmed.
};
  
//! \brief This is the enumeration type for when to notify text change in TextInput control.
/*!
The supported values are,
*/
enum class WhenToNotify
{
  Enter,        //!< The text control sends text change event when enter key is pressed.
  TextChange,   //!< The text control sends text change event when the text content is truly changed.
  Both          //!< The text control sends text change event on both cases.
};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_data Data Classes

This page lists all the data types and data classes that are used for data nodes in the LSB view files.
@{
*/

//! \brief This is the node for defining content of about information in a LSB view.
/*!
 - The content of this node is for the about information.
*/
class About
{
  public AboutDataType type;        //!< [Mandatory] This attribute defines the type of content in the About node.
};

//! \brief This node is used to select one of the supported data sources.
/*!
There is no specific node name for this node. Only one of the following data source nodes can be used.
 - csv - The data source is using the CsvData, i.e. data is downloaded through HTTP Web request.
 - json - The data source is using the JsonData, i.e. data is downloaded through HTTP Web request.
 - sql - The data source is using the SqlData, i.e. data is downloaded through SQL query.
 - script - The data source is using the ScriptData, i.e. data is generated through the script execution.
*/
class ChoiceOfData
{
  public bool showProgress;     //!< [Optional] This attribute defines if a progress dialog should be shown during the retrieval of data. The default value is false.
};

//! \brief This node is used to select one of the supported view controls.
/*!
There is no specific node name for this node. Only one of the following control nodes can be used.
 - splitLayout - The node should be specified to use the SplitLayout control.
 - tabLayout - The node should be specified to use the TabLayout control.
 - tableLayout - The node should be specified to use the TableLayout control.
 - buttonGroup - The node should be specified to use the ButtonGroup control.
 - chartView - The node should be specified to use the ChartView control.
 - listView - The node should be specified to use the ListView control.
 - textView - The node should be specified to use the TextView control.
 - treeListView - The node should be specified to use the TreeListView control.
 - treeView - The node should be specified to use the TreeView control.
 - webView - The node should be specified to use the WebView control.
 - button - The node should be specified to use the Button control.
 - propertyInput - The node should be specified to use the PropertyInput control.
 - textInput - The node should be specified to use the TextInput control.
 - comboBox - The node should be specified to use the ComboBox control.
*/
class ChoiceOfView
{
};

//! \brief This is color type that supports either CssColor or HtmlColor.
class Color
{
};

//! \brief This node defines the color setting to be used in ChartView.
class ColorSetting
{
  public Color fillColor;           //!< [Optional] The color for fill.
  public Color borderColor;         //!< [Optional] The color for borders.
  public Color lineColor;           //!< [Optional] The color for lines.
};

//! \brief This node defines the attributes for the Column to be used in ListView and TreeListView.
class Column
{
  public string name;                   //!< [Mandatory] This is the name for the column. It's also used to find the attribute in data.
  public string displayName;            //!< [Optional] Display name for the column header. If it's not specified, then name is used.
  public int width;                     //!< [Optional] This is attribute for the column width.
  public HorizontalAlignment align;     //!< [Optional] This is attribute that controls how th value in the column is aligned. The default value is Left.
  public bool visible;                  //!< [Optional] This is attribute that controls if the column is visible. The default value is true.
};

//! \brief This node defines a set of columns to be used in the ListView or TreeListView controls.
/*!
This is a container node for the following single type of nodes.
 - column - A set of Column nodes for columns in the ListView or TreeListView.
*/
class ColumnSet
{
};

//! \brief This is an attribute group, it defines the attributes that are used in all components, the base for all view controls, Procedure and ViewLauncher.
class ComponentAttributes
{
  public UUID id;       //!< [Mandatory] This attribute in type UUID is an attribute for all components.
};

//! \brief This is a node group, it defines the child nodes for all components, which is base of all view controls, Procedure and ViewLauncher.
/*!
Following nodes can be included, and each one of them can appear at most once.
 - input - [Optional] This node of InputParam defines the input parameters for the component.
 - output - [Optional] This node of OutputParam defines the output parameters for the component.
 - condition - [Optional] This node contains a piece of Lua script, defines if the input paramter value changes should trigger data source retrieval.
 - data - [Optional] This node of ChoiceOfData defines the data source for the component.
*/
class ComponentElements
{
};

//! \brief This is the node of ContextMenu for defining a context menu in LSB view controls.
/*!
It contains at least one of following items and there is no upper boundary on the node count.
 - menuItem - [Optional] This child node in type of ContextMenuItem is for menu items in the context menu.
 - separator - [Optional] This child node in type of ContextMenuSeparator is for separators in the context menu.
 - subMenu - [Optional] This child node in type of ContextMenuSubMenu is for sub menu in the context menu.
*/
class ContextMenu
{
  public bool copy;         //!< [Optional] This boolean attribute controls if the copy menu items should be enabled. The default value is false.
  public bool refresh;      //!< [Optional] This boolean attribute controls if the refresh menu item should be enabled. The default value is false. This refresh menu item will automatically load the data from the associated data source and refresh the context in the view control.
};

//! \brief This is the node of ContextMenuItem for context menu item.
/*!
It may contain following nodes as child.
 - output - [Optional] This child node is in type of OutputParamSet for all output parameters specific for this menu item.
 - data - [Optional] This child node is in type of ChoiceOfData for the data source associated with this menu item.
*/
class ContextMenuItem
{
  public string text;       //!< [Mandatory] This is the attribute for the context menu item text.
};

//! \brief This is the node of ContextMenuSeparator for separator in context menu.
/*!
There is no content, attribute or child node in the node.
*/
class ContextMenuSeparator
{
};

//! \brief This is the node of ContextMenuSubMenu for sub menu in context menu.
/*!
It should contain at least one of following nodes and there is no explicit upper boundary on the node count.
 - menuItem - [Optional] This child node is in type of ContextMenuItem. It's for menu items in the sub menu.
 - separator - [Optional] This child node is in type of ContextMenuSeparator. It's for separators in the sub menu.
 - subMenu - [Optional] This child node is in type of ContextMenuSubMenu. It's for sub menu in the sub menu - this indicates that the sub menu could be nested layer by layer.
*/
class ContextMenuSubMenu
{
  public string text;       //!< [Mandatory] This is the attribute for the context menu sub menu text.
};

//! \brief This is CSS color type in format of rgb(r, g, b) or rgba(r, g, b, a).
class CssColor
{
};

//! \brief This is the node to define the configuration for downloading CSV data from an URL through HTTP Web request.
class CsvData : public WebData
{
  public string delimeter;      //!< [Optional] This attribute defines the delimeted used for separating the columns in CSV data.
};

//! \brief This node defines a set of parameter mapping from an output parameter (source) to one or more input parameter (target).
/*!
This node contains a set of mapping nodes for each source parameter.
 - mapping - These nodes are in type of Mapping. It defines the mapping from one source parameter to one or more target parameters.
*/
class DataFlow
{
};

//! \brief This node defines the file reference to be used in WebView.
/*!
 - content - The content of this node is the actual path value.
*/
class FileReference
{
  public KnownPath path;        //!< [Optional] This attribute defines the path type. The default value is None,
};

//! \brief This node defines a set of FileReference to be used in the WebView.
/*!
This node contains a set of reference nodes for each file reference.
 - reference - A set of reference nodes in type of FileReference for the file references to be used in the WebView.
*/
class FileReferences
{
};

//! \brief This is the node that defines font description, for defining fonts to be used in LSB views.
class FontDesc
{
  public unsigned int encoding;    //!< [Optional] This is an attribute for the font encoding, the default value is 33.
  public FontFamily family;        //!< [Optional] This is an attribute for the font family, the default value is Default.
  public unsigned int pointSize;   //!< [Mandatory] This is an attribute for the font size in points.
  public FontStyle style;          //!< [Optional] This is an attribute for the font style, the default value is Normal.
  public FontWeight weight;        //!< [Optional] This is an attribute for the font weight, the default value is Normal.
  public bool underline;           //!< [Optional] This is an boolean attribute that controls if the font should be underlined, the default value is false.
  public bool strikethrough;       //!< [Optional] This is an boolean attribute that controls if the font should be strikethrough, the default value is false.
  public string faceName;          //!< [Mandatory] This is the attribute for the font face name.
};

//! \brief This node defines the highlight settings used in WebView for highlighting text.
class HighlightSetting
{
  public string name;           //!< [Mandatory] This attribute defines the name for the highlight setting.
  public string pattern;        //!< [Mandatory] This attribute defines the regular expression pattern for the content to be highlighted.
  public HtmlColor backColor;   //!< [Optional] This attribute defines the background color for the text to be highlighted.
  public HtmlColor foreColor;   //!< [Optional] This attribute defines the foreground color for the text to be highlighted.
};

//! \brief This is HTML color type in format of \#rrggbb.
class HtmlColor
{
};

//! \brief This is the node that defines the InputParam for input parameters.
class InputParam : public Parameter
{
  public string valuePattern;   //! [Optional] This is an attribute that defines the value pattern for the input parameter. Only if the value matches the pattern, then some operations will be triggered. The default value is empty, which means no pattern is defined.
};

//! \brief This is the node for the InputParamSet, contains a set of InputParam.
/*!
 - param - A set of param nodes in type of InputParam.
*/
class InputParamSet
{
};

//! \brief This is the node to define the configuration for downloading JSON data from an URL through HTTP Web request.
class JsonData : public WebData
{
  public string path;           //!< [Optional] This attribute defines the path to the data to be returned in a complicated JSON object or an JSON array. If the path is not specified, the whole JSON data downloaded is returned.
};

//! \brief This node defines the filter setting for ListView.
class ListViewFilter
{
  public bool visible;              //!< [Optional] This attribute defines if the filter control is visible in ListView. The default value is true.
  public string prompt;             //!< [Optional] This attribute defines the prompt text for the filter input. The default value is empty, which means there is no prompt.
  public string placeholder;        //!< [Optional] This attribute defines the placeholder text in the filter input when the actual value is empty. The default value is empty.
};

//! \brief This node defines the status setting for the ListView.
class ListViewStatus
{
  public bool visible;                      //!< [Optional] This attribute defines if the status bar is visible for ListView. The default value is true.
  public string singleItemCountPrompt;      //!< [Optional] This attribute defines the prompt text when there is only one item in the ListView. %%ITEM_COUNT%% is the placeholder for item count.
  public string multipleItemCountPrompt;    //!< [Optional] This attribute defines the prompt text when there are multiple items in the ListView. %%ITEM_COUNT%% is the placeholder for item count.
  public string noSelectionPrompt;          //!< [Optional] This attribute defines the prompt text when there is no item selected in the ListView.
  public string currentSelectionPrompt;     //!< [Optional] This attribute defines the prompt text for showing current selection in ListView. %%ITEM_INDEX%% is the placeholder for currently selected item index.
  public string singleSelectionPrompt;      //!< [Optional] This attribute defines the prompt text when there is only one item selected in the ListView.
  public string multipleSelectionPrompt;    //!< [Optional] This attribute defines the prompt text when there are multiple items in the ListView.
};

//! \brief This node defines the parameter mapping from one output parameter (source) to one or more input parameter (target).
/*!
This node may contain one to many target nodes.
- target - The target node defines the unique ID of target parameter (InputParam). The node has the UUID as its content, no attributes on it.
*/
class Mapping
{
  public UUID source;       //!< [Mandatory] This attribute defines the unique ID of a source parameter (OutputParam).
};

//! \brief This node defines single option to be used ComboBox or PropertyInput control.
/*!
There is no attribute on the node.
 - content - It's the option value.
*/
class Option
{
  public string group;          //!< [Optional] This attribute defines the option group that the option belongs to.
};

//! \brief This node defines a set of options to be used in ComboBox or PropertyInput control.
/*!
 - option - A set of option nodes for the options to be used in ComboBox or PropertyInput.
*/
class OptionList
{
};

//! \brief This is the OS type that defines which operating system the LSB view supports.
/*!
The value could be one of the values below or a combination of them separated by semi-colon.
  - Any - This is equivalent to Windows;Linux;MacOS
  - Windows - The LSB view supports Windwos system
  - Linux - The LSB view supports Linux system
  - MacOS - The LSB view supports Mac OS X system
*/
class OS
{
};

//! \brief This is the node that defines the OutputParam for output parameters.
class OutputParam : public Parameter
{
  public OperationType activation;  //!< [Optional] This is an attribute that defines which operation in the view control would trigger the activation of parameter change. The default value is Default.
};

//! \brief This is the node for the OutputParamSet, contains a set of OutputParam.
/*!
 - param - A set of param nodes in type of OutputParam.
*/
class OutputParamSet
{
};

//! \brief This is the node for the Parameter. It's base class for InputParameter and OutputParameter.
class Parameter
{
  public UUID id;       //!< [Mandatory] The unique ID for the parameter.
  public string name;   //!< [Mandatory] Name of the parameter.
};

//! \brief This node defines the prompt text for the ComboBox and TextInput.
/*!
 - content - It's the prompt text to be displayed.
*/
class Prompt
{
  public bool visible;          //!< [Optional] This boolean flag controls if the prompt should be visible.
  public bool exclusive;        //!< [Optional] This boolean flag controls if the prompt should be displayed in exclusive line.
};

//! \brief This node defines the configuration for a property field to be used in PropertyInput control.
/*!
 - options - [Optional] This child node defines the option list when the property is in a type needs options support.
*/
class PropertyField
{
  public string name;               //!< [Mandatory] This attribute defines the name for the property.
  public PropertyValueType type;    //!< [Mandatory] This attribute defines the type for the property.
  public string label;              //!< [Optional] This attribute defines the label for the property. If it's empty, then the name will be used for label.
  public string category;           //!< [Optional] This attribute defines the category for the property.
  public string description;        //!< [Optional] This attribute defines the description text for the property.
  public string default;            //!< [Optional] This attribute defines the default value for the property.
  public string fileTypes;          //!< [Optional] This attribute defines the file types supported by the property. It is used in the popup dialog when user tries to select a file.
  public string initialPath;        //!< [Optional] This attribute defines the initial path for the file property. It is used in the popup dialog when user tries to select a file.
};

//! \brief This node defines the font and style setting for condition matched rows in ListView and TreeListView.
/*!
 - font - This child node defines the font to be used in the matched row.
*/
class RowStyle
{
  public string condition;          //!< [Mandatory] This string attribute contains the row condition written in Lua script. The matched row will be displayed using configured font and colors.
  public Color foreColor;           //!< [Optional] This attribute defines foreground color for the matched row.
  public Color backColor;           //!< [Optional] This attribute defines background color for the matched row.
};

//! \brief This is the node that defines the configuration for generatign data through script execution.
/*!
 - content - The content of this node is the script to be executed for generating the data.
*/
class ScriptData
{
  public string type;           //!< [Mandatory] This attribute defines the type of the script, see shell configuration for supported script types. The Lua is an embedded and always supported script language.
  public unsigned int timeout;  //!< [Optional] This attribute defines the timeout for the script execution. The default value is 0, which means it will use the global setting for the script timeout.
};

//! \brief This is the node that defines the configuration for retrieving data through SQL query.
/*!
 - content - The content of this node is the query statement to be executed to search for the data in the database.
*/
class SqlData
{
  public string server;         //!< [Mandatory] This attribute indicates the database server to connect to.
  public string database;       //!< [Mandatory] This attribute indicates the name of the database that contains the data.
  public string user;           //!< [Optional] This attribute defines the user name to be used for connecting to the database.
};

//! \brief This node is used for defining the table cell in TableControl.
/*!
This node is derived from ChoiceOfView and uses one of the supported view controls as child node of it. Besides, it has extra attributes.
*/
class TableCell : public ChoiceOfView
{
  public unsigned int row;          //!< [Mandatory] This attribute defines row of the table cell.
  public unsigned int col;          //!< [Mandatory] This attribute defines column of the table cell.
  public unsigned int rowSpan;      //!< [Optional] This attribute defines row span of the table cell. The default value is 1.
  public unsigned int colSpan;      //!< [Optional] This attribute defines column span of the table cell. The default value is 1.
};

//! \brief This node defines the table column sizing settings.
class TableColumn
{
  public SizeType sizeType;         //!< [Mandatory] This attribute defines how the width is specified for the table column.
  public float width;               //!< [Mandatory] This attribute defines the width of the table column.
};

//! \brief This node defines the table row sizing settings.
class TableRow
{
  public SizeType sizeType;         //!< [Mandatory] This attribute defines how the height is specified for the table row.
  public float height;              //!< [Mandatory] This attribute defines the height of the table row.
};

//! \brief This node is used for defining the tag page in TabControl.
/*!
It's derived from ChoiceOfView and uses one of the supported view controls as child node of it. Besides, it has extra attribute.
*/
class TabPage : public ChoiceOfView
{
  public string title;      //!< [Mandatory] This is an attribute that defines the title for the tab page.
};

//! \brief This is the 16-byte unique ID.
/*!
The string representation of an UUID is 8-4-4-4-12 hexadecimal digits. One example of UUID string is b0db8ea8-2c10-4c20-9888-d4d0e91a00f0.
*/
class UUID
{
};

//! \brief This is the node for defining version information.
class Version
{
  public unsigned short major;      //!< [Mandatory] This is the major number in the version.
  public unsigned short minor;      //!< [Mandatory] This is the minor number in the version.
  public unsigned short build;      //!< [Optional] This is the build number in the version.
  public unsigned short revision;   //!< [Optional] This is the revision part in the version.
};

//! \brief This group defines the attributes for all views.
/*!
It includes all attributes deinfed in the ComponentAttributes.
*/
class ViewAttributes : public ComponentAttributes
{
  public LoadDataAt loadDataAt;     //!< [Optional] This attribute defines when the view should load the data. The default value is Default.
};

//! \brief This is the node that defines the caption of a LSB view control
/*!
 - content - The content of this node is for the view caption.
 */
class ViewCaption
{
  public bool visible;          //!< [Optional] This is a boolean attribute that controls if the view caption is visible, the default value is true.
};

//! \brief This group defines the child nodes for all views.
/*!
It includes all elements defined in the ComponentElements.
 - caption - [Optional] This node defines the caption for the view.
 - contextMenu - [Optional] This node defines the context menu for the view.
*/
class ViewElements : public ComponentElements
{
};

//! \brief This is the base node to define the configuration for downloading data from an URL through HTTP Web request.
/*!
Following nodes can be specified under this node,
 - url - [Mandatory] This child node contains the URL for the request. It's represented as content of the child node.
 - payload - [Optional] This child node contains the payload used for the request as it's content. It's only used when the method is set to Post.
*/
class WebData
{
  public HttpMethod method;     //!< [Optional] This attribute defines the HTTP Web method used for the request. The default value is Get.
  public string contentType;    //!< [Optional] This attribute defines the content type for the HTTP Web request.
};

//! \brief This node defines the data column for the X axis in ChartView.
class XAxisColumn
{
  public string name;               //!< [Mandatory] This attribute defines the name of the data column.
  public string displayName;        //!< [Optional] This attribute defines the display name for the data column. If it's not specified, then the name is used.
  public bool isDateTime;           //!< [Optional] This attribute defines if the data column is in type of datetime. The default value is false.
};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_view View Controls
This page contains the list of all view controls available in LSB.

- Layout Controls
  - ButtonGroup
  - SplitLayout
  - TabLayout
  - TableLayout
- Data View Controls
  - ChartView
  - FileList
  - FileTree
  - HexView
  - ListView
  - TextView
  - TreeListView
  - TreeView
  - WebView
- Input Controls
  - Button
  - ComboBox
  - TextInput
  - PropertyInput
- Invisible Components
  - Procedure
  - ViewLauncher

@{
*/

//! \brief The ButtonGroup is a layout control that supports automatically arranging a group of buttons in the designated area based on preset rules.
/*!
The ButtonGroup supports two ways to layout the buttons in the group.
 - If autoFlow attribute is set to true, then the buttons are automatically arranged based on their natural width (per on the text length). It puts
the buttons one by one in the same row. When the remaining space in a row is not big enough to fit in the next button, then the next button will be
put into a new row. The button after will be put after this button in the new row following the same space check rule.
 - If autoFlow is set to false, then the number of buttons in a row is determined by the value specified in the attribute buttonsPerRow. The buttons
will be resized to fit in the space, despite the actual content in the button.

This ButtonGroup node contains following child nodes,
 - All the nodes defined in ViewElements.
 - buttons - This node contains a set of button nodes where each of the nodes is in type of Button.

This ButtonGroup node contains following attributes,
 - All the attributes defined in the ViewAttributes
 - Plus following attributes,
*/
class ButtonGroup : public ViewElements, public ViewAttributes
{
  public bool autoFlow;                 //!< [Optional] This boolean attribute defines if the buttons would autoflow to next row when the tital width exceeds the space width.
  public unsigned int buttonsPerRow;    //!< [Optional] This attribute defines how many buttons will be put in each row when the autoFlow is set to false.
};

//! \brief The SplitLayout is a layout control that supports hosting two child views side by side.
/*!
Here are the SplitLayout features,
 - The two child views supported by SplitLayout could be any data view controls, input controls, or even layout controls including SplitLayout.
 - Depends on the orientation configured for the SplitLayout, the two child views could be placed either horizontally (one in left and another one in
right) or vertically (one in top and another one in bottom).
 - One of the child views could have fixed size, or both of them could be resizable at the same time when the SplitLayout control size changes.
 
 This SplitLayout node contains following child nodes,
 - All the nodes defined in ViewElements.
 - The left node and right node if the orientation is set to Horizontal, both in type of ChoiceOfView.
 - The top node and bottom node if the orientation is set to Vertical, both in type of ChoiceOfView.

 This SplitLayout node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class SplitLayout : public ViewElements, public ViewAttributes
{
  public Orientation orientation;   //!< [Optional] This attribute defines the orientation of the two child views in SplitLayout. The default value is Horizontal.
  public FixedView fixedView;       //!< [Mandatory] This attribute defines which one of the two child views has fixed size.
  public double ratio;              //!< [Optional] When the fixedView is set to None, this attribute defines the ratio of how the two child views split the client size, either width (if orientation is set to Horizontal) or height (if orientation is set to Vertical).
  public unsigned int size;         //!< [Optional] When the fixedView is set to value other than None, this attribute defines the size of the fixed size child view.
};

//! \brief The TabLayout is a layout control that arranges child views in tab pages.
/*!
The TabLayout layout control uses the TabControl to arrange multiple child views in tab pages, one child view in each tab page. The child views in 
each tab page could be data view controls, input controls or even layout controls including TabLayout itself.

This TabLayout node contains following child nodes,
 - All the nodes defined in ViewElements.
 - pages - This is the parent node for all page nodes in type of TabPage. There should be at least one page under the pages node, and there is no upper
 boundary on the page count.

 This TabLayout node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class TabLayout : public ViewElements, public ViewAttributes
{
  public bool multiLine;            //!< [Optional] This boolean attribute controls if the tab headers in the tab control can be displayed in multiple rows. The default value is false.
  public TabPosition tabPosition;   //!< [Optional] This attribute defines in which side should be tab headers be displayed. The default value is Top. 
};

//! \brief This TableLayout is a layout control that arranges multiple child views in a table layout.
/*!
The TableLayout arranges the child views in a way very similar to the HTML table. It supports child views including data view controls, input controls,
and layout controls. Each child view can have customized position and size settings similar to the HTML cell in HTML table.

This TableLayout node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Mandatory] The rows node defines how the size of each row is calculated. It contains a set of row elements. Each row element is in type of TableRow.
 - [Mandatory] The columns node defines how the size of each column is calculated. It contains a set of column elements. Each column element is in type of TableColumn.
 - [Mandatory] The cells node defines the position and size of child views, as well as which child view is placed inside the table cell. It contains a set of cell nodes. Each cell element is in type of TableCell.

This TableLayout node contains following attributes,
 - All the attributes defined in the ViewAttributes.
*/
class TableLayout : public ViewElements, public ViewAttributes
{
};

//! \brief This ChartView is a data view control that uses the wxChart control to render data as charts.
/*!
Please refer to <a href="https://github.com/wxIshiko/wxCharts">wxChart</a> to see more details on which charts are supported by the this data view
control.

This ChartView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Mandatory] The xAxis node in type of XAxisColumn defines which column in data will be used for the x-axis in the chart.
 - [Optional] The colors node contains a set of color nodes in type of ColorSetting that defines the colors to be used in the charts view control.

This ChartView node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class ChartView : public ViewElements, public ViewAttributes
{
  public ChartType chartType;       //!< [Mandatory] Thia attribute controls which type of chart is to be rendered.
  public bool showLegend;           //!< [Optional] This attribute controls if the legend should be displayed together with the chart.
  public LineType lineType;         //!< [Optional] This attribute controls the line type to be used in the charts.
  public HtmlColor background;      //!< [Optional] This attribute controls the background color for the chart.
  public bool showTooltip;          //!< [Optional] This attribute controls if the tooltip should be visible in the chart.
};

//! \brief This FileList is a data view control that uses a list view to display files and/or folders under the specified path in file system.
/*!
The FileList implements most of the features available in the ListView, including filter, status, copy, etc. Please refer to ListView for more details
on these features.

The FileList node contains following child nodes,
 - All the nodes defined in the ViewElements.
 - [Optional] The rowStyles node contains a set of row nodes in type of RowStyle that defines the style for matched rows.

The FileList node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class FileList : public ViewElements, public ViewAttributes
{
  public bool multiSelect;      //!< [Optional] This attribute controls if the file list view supports multiple selections on the items. The default value is false.
  public bool filter;           //!< [Optional] This attribute controls if the filter support is enabled for the file list view. The default value is true.
  public bool status;           //!< [Optional] This attribute controls if the status bar is enabled for the file list view. The default value is true.
  public bool files;            //!< [Optiona;] This attribute controls if files are shown in the file list view. The default value is true.
  public bool dirs;             //!< [Optional] This attribute controls if folders are shown in the file list view, The default value is false;
  public bool hidden;           //!< [Optional] This attribute controls if hiden files/folders are shown in the file list view. The default value is false.
  public bool dotdot;           //!< [Optional] This attribute controls if . and .. folders are shown in the file list view. The default value is false.
};

//! \brief This FileTree is a data view control that uses a tree view to display the folder structures under the specified path in file system.
/*!
The FileTree implements similar features available in the TreeView. It loads the folder hierachy in file system and populate them into the tree view control. User
may expand/collapse a folder or select a folder to trigger further actions in other controls.

The FileTree node contains following nodes,
 - All the nodes defined in the ViewElements.

The FileTree node contains following attribtues,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class FileTree : public ViewElements, public ViewAttributes
{
  public string root;       //!< [Optional] This attribute controls the default path that the FileTree will load data from. Empty value means nothing will be loaded.
};

//! \brief This HexView is a data view control that displays binary data in the hexadecimal format.
/*!
The HexView displays each byte in the binary data as two-digit hexadecimal. User may customize the control to display offset for each line and also show the text form
for each byte if it's visual character, otherwise a dot '.' is displayed for the byte. Besides, user may also customize how many bytes are displayed in each line and
how many bytes should be grouped in each line. The byte count in line should be multiplies of byte count in each group.

The HexView node contains following nodes,
 - All the nodes defined in the ViewElements.
 - The font node in type of FontDesc that defines which font is used to display the content in the HexView.
 - The highlights node which contains a list of highlight nodes in type of HexViewHighlightSettings that defines the highlight styles to be used in the HexView control.

The HexView node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class HexView : public ViewElements, public ViewAttributes
{
	public unsigned int groupSize;  //!< [Optional] This defines how many bytes are displayed in each group in a line. The default value is 0 which means no groups.
    public unsigned int lineSize;   //!< [Optional] This defines how many bytes are displayed in each line. The default value is 16.
	public unsigned int offsetSize; //!< [Optional] This defines how many digits are used to display the offset for the data. The default value is 8.
    public bool showOffset;         //!< [Optional] This boolean flag controls if the offset area is shown in the HexView control. The default value is true.
    public bool showText;           //!< [Optional] This boolean flag controls if the text form for the bytes is shown in the control. The default value is true.
};

//! \brief This ListView is a data view control that uses the very common list view control to display data in rows and columns.
/*!
Besides displaying data, this view control supports many other useful features,
 - Supports single selection or multiple selection of items in the list view.
 - The index of selected row as well as values in each of the columns for the selected row could be sent out to other view controls through output parameters for the ListView.
 - There is rich filtering feature supported in the ListView control, see details in the \ref section_smart_filter.
 - User may copy full row or selected columns from the selected row(s) into clipboard, in plain text or HTML format.
 - There is status bar showing the item status and selection status for the items in the ListView.

This ListView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The filter node in type of ListViewFilter configures the filter setting for the ListView.
 - [Optional] The status node in type of ListViewStatus configures the status setting for the ListView.
 - [Mandatory] The columns node in type of ColumnSet defines the columns to be shown in the ListView.
 - [Optional] The rowStyles node contains a set of row nodes in type of RowStyle that defines the style for matched rows.
 
This ListView node contains following attributes,
 - All the attributes defined in the ViewAttributes.
 - Plus following attributes,
*/
class ListView : public ViewElements, public ViewAttributes
{
  public bool sortable;         //!< [Optional] This boolean attribute controls if the ListView supports sorting by clicking on column headers.
  public bool multiSelect;      //!< [Optional] This boolean attribute controls if the ListView supports multiple selection of items.
};

//! \brief This TextView is a data view control for displaying single line or multiple lines of plain text.
/*!
This TextView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The font node in type of FontDesc defines the font to be used for displaying the text content.
 - [Optional] The content node contains the predefined content to be displayed in the control.

This TextView node contains following attributes,
- All the attributes defined in the ViewAttributes.
- Plus following attributes,
*/
class TextView : public ViewElements, public ViewAttributes
{
  public bool noWrap;           //!< [Optional] This boolean attribute controls if the text content longer than the TextView width should be wrapped automatically (when the value is false). The default value is false.
  public bool multiline;        //!< [Optional] This boolean attribute controls if the control can display multiple lines of text content. The default value is true.
  public bool readOnly;         //!< [Optional] This boolean attribute controls if the control is used to display text only. When this attribute is set to false, user may edit the content in place. The default value is false.
};

//! \brief This TreeListView is a data view control for displaying hierachy data in multiple columns.
/*!
This TreeListView control combines features from both list view and tree view. It can display the hierachy data as tree view, meanwhile it can also display data for each
node with more details in multiple columns, like the list view.

This TreeListView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Mandatory] The columns node in type of ColumnSet defines the columns to be shown in the TreeListView.
 - [Optional] The rowStyles node contains a set of row nodes in type of RowStyle that defines the style for matched rows.

This TreeListView node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class TreeListView : public ViewElements, public ViewAttributes
{
  public string childProperty;  //!< [Mandatory] This attribute define the property name for getting the child node data in the data for current node.
  public int expandLevel;       //!< [Optional] This attribute defines how many levels of child data will be expanded automatically when data is loaded into the control. Default value is 0.
};

//! \brief This TreeView is a data view control for displaying hierachy data in tree style.
/*!
This TreeView control requires data being presented in layers through a predefined child property. The value of the child property should be an array in the same type of
data, each element in the array reprensents a child node of current node.

This TreeView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The nodeColors node contains a set of node nodes in type of RowStyle that defines the style for matched rows.

This TreeView node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class TreeView : public ViewElements, public ViewAttributes
{
  public string labelProperty;  //!< [Optional] This attribute defines the name of data property that contains the value for tree node name. The default value is name.
  public string childProperty;  //!< [Mandatory] This attribute defines the name of data property that contains data for the child nodes.
};

//! \brief This WebView is a data view control for displaying data through Web page form.
/*!
This WebView can be used to show data in any form that the user wants to, depends on how the page content is rendered. The LSB view creators can use HTML + JavaScript +
CSS to create whatever they want to visualize the data. This provides LSB the capability to render data in forms not limited to the existing data view controls.
Basically the LSB view authors can create any new controls with the support of HTML + JavaScript in the WebView.

The WebView node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The styles node contains a set of file nodes in type of FileReference that define the CSS style files to be referenced in the WebView page.
 - [Optional] The scripts node contains a set of file nodes in type of FileReference that define the JavaScript files to be references in the WebView page.
 - [Optional] The body node in type of FileReference defines the web page body content defined in separate file.
 - [Optional] The highlights node contains a set of highlight nodes that define how specific content in the Web page content should be highlighted.

The WebView node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class WebView : public ViewElements, public ViewAttributes
{
  public ContentType contentType;    //!< [Mandatory] This attrubutes defines the type of the data that is returned from the data source associated with the WebView control.
  public bool selectToHighlight;     //!< [Optional] This attribute controls if the highlight for selection should be enabled or not. The default value is false.
};

//! \brief This Button is an input control for taking user's click action to confirm or trigger an operation.
/*!
The Button control uses the generally used button control in GUI applications to implment the functionalities. It typically shows a string as label and has a piece of
script hooked with it - when the end user clicks on the button, the corresponding scipt will be executed to take an action or grab data from various data sources. And
the LSB view can in term pass data to some other controls to implement corresponding busioness logic.

The Button node contains following child nodes,
 - All the nodes defined in ViewElements.

The Button node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class Button : public ViewElements, public ViewAttributes
{
    public DockStyle dock;      //!< [Optional] This dock attribute controls how the button is arranged within the space allocated for it. See DockStyle for detailed explanations on each possible values. The default value is None.
	public string label;        //!< [Mandatory] This label attribute defines the text to be displayed on the button cpontrol.
    public string description;  //!< [Optional] The attribute defines the description text for the button, which is also used as the content for the hint for the button.
};

//! \brief The ComboBox is an input control that supports user to either select a value from predefined value list or type in any other value.
/*!
The ComboBox control is a combination of a list box and an edit control. The end user may select a value from the predefined value list or type in a value through the
edit control. And the control will send the value out through output parameter to trigger any further action(s).

The ComboBox node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The prompt node in type of Prompt defines the prompt for the ComboBox input.
 - [Optional] The options node in type of OptionList defines the preset values that the end user can select one from them.

The ComboBox node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class ComboBox : public ViewElements, public ViewAttributes
{
    public bool selectOnly;         //!< [Optional] This boolean flag controls if the ComboBox supports selecting value from list only (true) or also allows end user to type in value (false). The default value is false.
	public bool sorted;             //!< [Optional] This boolean flag controls if the values in the value list are sorted or not. The default value is false.
	public TrimSpace trimSpace;     //!< [Optional] This attribute controls if the user selected/typed in value should have space(s) trimmed before it's sent to other view controls. The default value is None.
    public string defaultValue;     //!< [Optional] This attribute defines the default value for the control. The default value is empty string.
};

//! \brief The TextInput is an input control that allows user to type in any character as the input value.
/*!
The TextInput supports both single line and multiple line text edit control that allows end user to type in text as value and send to other view controls though output
parameter associated with it. It's typically used as input control for one single value. To create input for multiple values or a complicated data structure, please
refer to the PropertyInput control. The value inputed through TextInput is a string. View author can convert the the string value into any other data types as they need
in the script(s).

The TextInput node contains following child nodes,
 - All the nodes defined in ViewElements.
 - [Optional] The prompt node in type of Prompt defines the prompt for the TextInput control.
 - [Optional] The content node defines the string content as the initial value for the TextInput control.

The TextInput node contains following attributes,
 - All the attributes defined in ViewAttributes.
 - Plus following attributes,
*/
class TextInput : public ViewElements, public ViewAttributes
{
    public string defaultValue;         //!< [Optional] This attribute defines the default value for the TextInput control. The default value is empty string.
	public TrimSpace trimSpace;         //!< [Optional] This attribute controls if the user selected/typed in value should have space(s) trimmed before it's sent to other view controls. The default value is None.
	public bool multiline;              //!< [Optional] This boolean attribute controls if the TextInput supports single line edit control or multiple line edit control. The default value is false, which means it implements as single line edit control.
	public WhenToNotify whenToNotify;   //!< [Optional] This attribute in type of WhenToNotify defines when to trigger the output parameter to send out the new value that the end user types in to other view controls. The default value is Enter, which means when the Enter key is pressed.
};

//! \brief The PropertyInput is an input control that supports editing multiple variables or complicated structure(s) in one single control.
/*!
The PropertyInput allows user to input multiple values within one single control, and it also supports inputing values in different types directly (not like TextInput
or ComboBox, with them the view author has to do the conversion from string to the target data types). These features greatly help the view author on reducing the
effort on creating input controls and doing data conversions. There supported data types can be found in the explanation for PropertyValueType.

The PropertyInput node contains following nodes,
 - All the nodes defined in ViewElements.
 - [Mandatory] The properties node contains a list of property node in type of PropertyField which defines the configuration for each property field, equivalent to a variable or a field in a complicates structure.

The PropertyInput node contains following attributes,
 - All the attributes defined in ViewAttributes,
 - Plus following attributes,
*/
class PropertyInput : public ViewElements, public ViewAttributes
{
    public TrimSpace trimSpace;     //!< [Optional] This attribute controls if the string values user typed in should have space(s) trimmed before it's sent to other view controls. The default value is None.
};

//! \brief The Procedure node does what the name means, execute a piece of script like procedure or function in programming languages.
/*!
The Procedure is an invisible component. It doesn't like other data view, input or layout controls, that they will take some space in the GUI. This component takes no
space on screen at all. The purpose of this component is to take input from other controls or components, run the configured script to complete certain functionality or
generate a new data set, and then in turn pass the data to one or more other controls.

The Procedure node contains following child nodes,
 - All the nodes defined in ComponentElements.

The Procedure node contains following attributes,
 - All the attributes defined in ComponentAttributes,
 - Plus following attributes,
*/
class Procedure : public ComponentElements, public ComponentAttributes
{
    public string name;             //!< [Optional] This attribute defines the name of the procedure.
	public ExecuteAt executeAt;     //!< [Optional] This attribute in type of ExecuteAt controls when the script should be triggered, it could be one shot only or repetitive.
	public string timerInterval;    //!< [Optional] The script execution interval when the executeAt is set to TimerTicking or TimerStartAndTicking.
};

//! \brief The ViewLauncher node is a component to launch another LSB view with parameters.
/*!
The ViewLauncher is another invisible component. It collects parameter values from current view, sends them as input parameter for the target view and launch the target
view specified through the view configuration. In the configuration, to specify the target view to be launched, view author needs to specify both the repository name
and the view name. The reason is that the view name is not unique from LSB perspective - the views in different repositories might have the same name.

The ViewLauncher node contains following child nodes,
 - All the nodes defined in the ComponentElements.
 - [Mandatory] The connection node in type of DataFlow defines how the parameters in current view will be passed into the target view as input parameters.

The ViewLauncher node contains following attributes,
 - All the attributes defined in the ComponentAttributes,
 - Plus following attributes,
*/
class ViewLauncher : public ComponentElements, public ComponentAttributes
{
    public string repository;       //!< [Mandatory] This attribute defines the repository name of the target view to be launched.
	public string view;             //!< [Mandatory] This attribute defines the name of the target view to be launcher.
};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//! \brief LsbView is the unit that is supported in LSB to implement different functionalities to meet different business requirements.
/*!
In each of the LSB view file, LsbView is the root node that defines all the controls to be used within the view, together with the corresponding scripts (Lua, bash,
PowerShell or any other user defined scripts) and parameter flows to implement the specific business logic to achieve the goal.

The LsbView node contains following nodes,
 - [Optional] The description node contains a long string that describes the purpose, usage or any other view related information.
 - [Mandatory] The version node in type of Version defines the version number of the view.
 - [Optional] The modules node contains a list of module nodes. Each of the node contains a string that defines the path to a module that is referenced in the view.
 - [Optional] The value of this os node should be values in type of OS and separated by semi-colon. The values indicate the view supports which Operatings Systems.
 - [Optional] This about node in type of About contains the definition of the about information of this view.
 - [Mandatory] The view node in type of ChoiceOfView is the root node of all the view controls used in the LSB view. Typically it starts with one of the layouts.
 - [Optional] The procedures node contains a list of procedure nodes in type of Procedure which define the script procedures/functions.
 - [Optional] The launchers node contains a list of launcher nodes in type of ViewLauncher that are used to launch another LSB view from current view.
 - [Optional] The dataFlow node in type of DataFlow defines how an output parameter in a souce view is connected with an input parameter in a target view.

The LsbView node contains following attributes,
*/
class LsbView
{
	public string name;             //!< [Mandatory] This attribute contains the name of the LSB view.
	public string author;           //!< [Mandatory] This attribute contains the author information (full name or nick name).
	public DateTime createTime;     //!< [Mandatory] This attribute contains timestamp of when the LSB view was created.
	public DateTime lastChangeTime; //!< [Mandatory] This attribute contains timestamp of when the LSB view was last changed.
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_create_view How to Create a LSB View

## Write a LSB view

The recommended editor for composing LSB view file, in XML format, is the Microsoft [Visual Studio](https://visualstudio.microsoft.com/). With the provided schema definition for the LSB view files, the Visual Studio can provide rich hints on the potential nodes, attribute names, even values when user types in new text. This is the only editor that I'm aware of that comes with this feature, other editors (including Visual Studio Code) support syntax highlighting, but no hints at equivalent level.

The [LsbViewSchema.xsd](https://github.com/xjluo-lsb/lsb.views/blob/main/LsbViewSchema.xsd) comes in the views folder is the schema definition for the LSB view files. This schema file has all data types and data structures for view controls and values defined. In Visual Studio, it reads all these schema information and provides hinting in the editor. If your editor does not support schema based hinting, please read the type documents along with this page, you will get all the necessary information needed to create a LSB view file.

The LSB view files all contain same structure descibed as below, the detailed schema introduction can be found at LsbView. Please refer to the sample views come in the DefaultViews view repository to understand the file format better.

The file comes with root node named %LsbView, which has attributes named name, author, createTime and lastChangeTime. The node contains following child nodes, you may or may not need all of them to be presented in a LSB view file. The order of these nodes is not significant.
- **description** is a node contains long description for the LSB view.
- **version** is a node describing the version of the LSB view.
- **modules** contains a list of modules that are automatically referenced in the Lua shell for the LSB view.
- **os** defines which Operating Systems are supported by this LSB view.
- **about** defines the about information for the view.
- **view** is the actual root view control for the LSB view. In most cases, this should be a layout control, such as SplitLayout, TabLayout, etc., which could contain multiple child views for input or data view, or another layout control to host even more child views.
- **procedures** contains a list of procedures that contains separated shell scripts if the LSB view needs them.
- **launchers** contains a list of launchers that are used to launch another LSB view from current view.
- **dataFlow** is the node that defines all the input parameter and output parameter mappings to get the view controls well connected.

Here's a sample view that hosts a simple text view for editing plain text,

\code{.xml}

<?xml version="1.0"?>

<LsbView xmlns="https://github.com/xjluo-lsb/lsb.views"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://github.com/xjluo-lsb/lsb.views ..\LsbViewSchema.xsd"
         
  name="TextView demo"
  author="Kevin Luo"
  createTime="2024-10-24T00:00:00Z"
  lastChangeTime="2024-10-24T00:00:00.000Z">

  <description>A simplest view that demostrates the TextView control.</description>
  <version major="0" minor="1" build="0" revision="0" />

  <view>
    <textView id="6d627fac-651b-4815-b0fa-4d584f0bc45e" multiline="false" readOnly="false">
      <data showProgress="false">
        <script type="lua">
<![CDATA[
return [[This is the default text for the view.]]
]]>
        </script>
      </data>
    </textView>
  </view>
</LsbView>

\endcode

You may save this code snipper into a XML file and the follow the instructions in the next section to test and debug the view.

## Parameter mapping

As mentioned above, the **dataFlow** node is used to define the parameter mappings inside a view, typically connects an output parameter from a view control to an input parameter in another view control.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_debug_view How to Test/Debug a LSB View

When you are creating a new LSB view, you definitely want to test it before you release it to other users. Here are the steps on how you can test a LSB view locally through the LSB application.

<ol>
<li>Create a folder for the view to be created/tested.</li>
<li>Create or put the view to be tested in the folder.</li>
<li>Launch LSB and open the settings dialog, create a new view repository points to this folder.</li>
<li>Open the view to be tested in LSB, now you can see the view content.</li>
<li>In the logs tab in the view window, you can find how the parameters are populated and how parameters are passed between different view controls in the LSB view.</li>
<li>In the Lua tab in the view window, you can find all the Lua scripts executed within the view to implement the functionalities, such as parameter check, data generation, etc.</li>
</ol>
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_wrapper_script The Wrapper Script for Shells

The LSB application uses Lua as internal support script to implement many funtionalities, such as 
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_faq Frequently Asked Questions

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_smart_time The Smart Time Input

## Date time

### Standard ISO format

The LSB supports the input of the standard ISO date time in the format of one of followings,
 - **yyyy-MM-ddThh:mm:ss.nnn+zone**
 - **yyyy-MM-ddThh:mm:ss.nnn-zone**
 - **yyyy-MM-ddThh:mm:ss.nnnz**
 - **yyyy-MM-ddThh:mm:ss.nnn(UTC)**

Here the meanings of each field are listed as below,
 - **yyyy** - The year of the date time
 - **MM** - The month of the date time
 - **dd** - The day of the date time
 - **hh** - The hours of the date time
 - **mm** - The minutes of the date time
 - **ss** - The seconds of the date time
 - **nnn** - The milliseconds of the date time
 - **zone** - It is the time zone difference, specified in format of **hhmm**, i.e. hours and minutes
 - **z** - A simple character **z** or **Z** means that the date time is in GMT-0 time zone, i.e. the date time is an UTC time
 - **(utc)** or **(UTC)** - It means the date time is an UTC time
 - The characters not mentioned above are mandatory delimeters for the date time value, such as **-**, **T**, etc.

### Smart format
 
The date time input in LSB also supports a flexible and smart format, such as,
 - **now** - It's for the current time
 - **1 week 2 days and 3 hours ago** - It's for time in the past compared to current time, specified through the suffix **ago**. If the current time is 2024-01-01T00:00:00, then the time specified with this string input is **2023-12-22T21:00:00**.
 - **1h 2m 3s later** - It's for time in future compared to current time, specified through the suffix **later**. If the current time is 2024-01-01T00:00:00, then the time specified with this string input is **2024-01-01T01:02:03**.

There are multiple different time units could be included in this smart time format, and these time units must be presented in the following order, from large time unit to small time unit. Meanwhile, any of these units could be optional if the corresponding value is 0.
 - **week** - It could be specified with one of these words - **w**, **wk**, **week**, **weeks**
 - **day** - It could be specified with one of these words - **d**, **day**, **days**
 - **hour** - It could be specified with one of these words - **h**, **hr**, **hour**, **hours**
 - **minute** - It could be specified with one of these words - **m**, **min**, **minute**, **minutes**
 - **second** - It could be specified with one of these words - **s**, **sec**, **second**, **seconds**
 - **and** - This word is used to connect different time parts in different units. It's optional. The space character does the same job to connect the different time parts in different units.

Besides, you can also use **year** or **month** individually to specify times,
 - **year** - It could be specified through one of these words - **y**, **yr**, **year**, **years**. Example values are **1 year ago**, **2 yr later**.
 - **month** - It could be specified through one of these words - **mon**, **month**, **months**. Example values are **2 months ago**, **3 mon later**.

As mentioned earlier, at the end of of the time string, **ago** is appended for time in the past and **later** should be specified for time in future. And obviously, these two suffixes cannot be used together.

Please be reminded that **year** and **month** cannot be used together with each other or used with any of the previously explained **week**, **day**, **hour**, **minute** or **second**. It is very rare that there is need to specify a time with such large and small time units together. Even if there is the need to specify time with large gap and fine resolution, the time could be specified through **week** or **day**.

## Time span

### Standard format

Similiar to the date time, LSB supports standard time span in format of **d.hh:mm:ss.nnn**, where each of the fields means,
 - **d** - The days for the time span (integer part only). It could contain any digits as needed depends on how big the time span is. And it could also be zero or omitted (together with the dot follows it) if the time span is less than one day.
 - **hh** - The hours part of the time span. It's mandatory and must be presented as **00** if the hour part in the time span is 0.
 - **mm** - The minutes part of the time span. It's mandatory and must be presented as **00** if the minute part in the time span is 0.
 - **ss** - The seconds part of the time span. It's mandatory and must be presented as **00** if the second part in the time span is 0.
 - **nnn** - The milliseconds part of the time span. It's optional. When it's present in the time span value, it must contain 3 digits. For milliseonds less than 100, they should be left padded by zero. When the milliseconds part is not present in the time span value, it means that the millisecond part is 0.

### Smart format

The time span also supports the smart format in the same way as smart time, except the suffix of **ago** and **later**, they are not needed for time span values. Here are some example values,
 - 1 week 2 days and 3 hours
 - 1 hour 23 minutes 45 seconds
 - 5 mins and 6 secs
 - 12 minute
 - 2 years
 - 3 mon

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_smart_filter The Smart Filtering in ListView

The ListView control supports rich client filtering functionality through the embedded filter input on the top. It can be turned on/off through the **visible** attribute in the **filter** node (see ListViewFilter) in the ListView definition. Here we discuss that when the filter feature is turned on in the ListView, how we can use it to quickly find items in the ListView.

## Column Based Filter

A filter is typically specified as `column_name:filter_value`. Both the column name and the filter value could have double quotes to wrap them. The double quotes are required only if there are one or more spaces contained in the column name or filter value. If column name is not specified in a filter, then this filter pattern will be tested against all columns in all items.

Here are some examples of column based filter,
\li `ABC:123` is a valid column based filter. Here the `ABC` is the column name and `123` is the filter value. This filter means that only if the value of column ABC contains `123`, the item is considered matched. Items that have other columns contain value `123` but value in column `ABC` does not contain `123` are not recognized as matched item.
\li `"AB C":"\d+A\d+"` is also a valid column based filter. Here the `AB C` is the column name and `\d+A\d+` is the filter value. The double quotes in the column name are necessary as there is a space inside the column name. Meanwhile the double quotes in the column pattern are optional.
\li `A B C:invalid` is an invalid column based filter. The reason is that the value cannot be parsed as `column_name:filter_value`. In this case, the whole string will be used for simple string match test and all columns will be tested. See next section for why.

## Filter Value

The filter support first tries to parse the filter value that user types in as a regular expression pattern and then uses the created regular expression pattern to match the values in corresponding column(s). If the specified filter value cannot be parsed as a regular expression, then the whole filter value will be used to do simple string match test. For example,
\li The value `A\d+B\d*` is a valid regular expression pattern, if the corresponding column contains values like A1B, A22B1, then the item is recognized as matched item.
\li The value `*\ABCD` cannot be parsed as regular expression, thus the string value is used to do simple match. Only if the corresponding column value contains `*\ABCD`, then the item will be considered as matched item.

As explained above, the filter value could have a pair of double quotes to wrap it if the value contains space(s). The double quotes used to wrap the filter value won't be used as part of the pattern or string match. If there is no space in the filter value, then the double quote is unnecessary. If there is space in the filter value and we don't use quotes to wrap the value, it will be recognized as multiple filters. The only case that we may skip double quotes with space(s) in the input is that we want to use the whole input to do simple string match test. See the invalid column based filter case above.

## Combination of Filters through Operators

We can put multiple column based filters together to create for complicated filters. For example, with `A:1 AND B:2 AND C:3` we setup a new filter that requires column A to contain 1 and column B to contain 2 and column C to contain 3. Only if all three conditions are all met, an item in the ListView is considered as matched item. The operators supported to connect the filters are,
\li **AND**, upper case only. It means both two filters need to be matched to declare an item matches the combined filter.
\li **OR**, upper case only. It means that as long as one of the two connected filters is matched, then the item is declared as matched.
\li **NOT**, upper case only. This is the not operator. When this operator is present, it means the filter next to it must be unmatched to make the combined filter matched. For example, `! A:1` means that only if the value in column A does not contain 1, then the item is recognized as matched item.

## Grouping of Filters

When the column based filters are connected through operators, it could become difficult to read the meaning of a filter. For example, what does this filter mean?

  `A:1 AND B:2 OR A:3`

And does it have the same meaning as `A:3 OR B:2 AND A:1`? The answer is no. It takes time to figure out the actual meaning of them and learn that they are different.

To make the combined filters more clear and easy to read, we may use brackets to wrap the filters. Anything inside a pair of brackets will be treated like one filter when they are connected with other filters. For exmaples above, if we rewrite them as below,

  `A:1 AND (B:2 OR A:3)`, `(A:3 OR B:2) AND A:1`

It becomes very easy to know that they have the same meanings, despite the actual meaning of the filters is reasonable or not.

*/
