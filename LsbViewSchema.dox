////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\mainpage Leave Script Behind Explained

This is the main document for Leave Script Behind (LSB), it includes introduction to the LSB tool, the schema for LSB view files, how to create a LSB view file, how to test a LSB view file, as well as answers for other frequently seen problems.

- \ref section_intro
- Schema - this section explains the schema for the LSB view files,
  - \ref section_enum
  - \ref section_data
  - \ref section_view
  - \ref section_lsb
- \ref section_create
- \ref section_debug
- \ref section_faq
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_intro Introduction

Leave Script Behind is a cross platform tool designed with the main goal to chain a series of shell commands to complete a sepecific task, ease the user's life by reusing the LSB views without remembering all the shell commands and their parameters. As you know, some of the shell commands are very complicated and it's really a pain for someone who are new to the commands or not using them frequently to remember all the details. Besides, it provides rich capabilities on,
- Data connectivity through SQL databases, Web APIs, etc.
- Support Lua language embedded in views to generate data and execute tasks.
- Offer rich data visualizaion through list view, tree view, chart view or web view with JavaScript support.
- Provides easy input controls for users to input values, from integer, string, to files.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_enum Enumeration Types

In this page, it lists all enumeration types that define the values for attributes in data classes and view controls in the LSB views.

@{
*/

//! \brief This is the enumeration type for specifying the content type for the about node in LSB views.
/*!
This is used for the about information for the LSB views. The supported values are,
*/
enum class AboutDataType
{
  None,     //!< The about content is not specified. The about information will be generated from the settings for the LSB view.
  Content,  //!< The content for about information is directly specified as the content of the about node.
  Url       //!< The about node content is an URL to a Web page for the about information.
};

//! \brief This is the enumeration type for chart type used for the attribute chartType in the ChartView.
/*!
It defines the chart type displayed in the ChartView. The supported values are,
*/
enum class ChartType
{
  BarChart,            //!< This is value for displaying bar chart in the chart view control.
  StackedBarChart,     //!< This is value for displaying stacked bar chart in the chart view control.
  ColumnChart,         //!< This is value for displaying column chart in the chart view control.
  StackedColumnChart,  //!< This is value for displaying stacked column chart in the chart view control.
  BoxPlot,             //!< This is value for displaying box plot in the chart view control.
  CandlestickChart,    //!< This is value for displaying candlestick chart in the chart view control.
  OhlcChart,           //!< This is value for displaying OHLC chart in the chart view control.
  PieChart,            //!< This is value for pie bar chart in the chart view control.
  DoughnutChart,       //!< This is value for displaying doughnut chart in the chart view control.
  PolarAreaChart,      //!< This is value for displaying polar area chart in the chart view control.
  BubbleChart,         //!< This is value for displaying bubble chart in the chart view control.
  ScatterPlot,         //!< This is value for displaying scatter plot in the chart view control.
  Math2dPlot,          //!< This is value for displaying math 2D plot in the chart view control.
  LineChart,           //!< This is value for displaying line chart in the chart view control.
  AreaChart,           //!< This is value for displaying area chart in the chart view control.
  Histogram,           //!< This is value for displaying histogram in the chart view control.
};
	  
//! \brief This is the enumeration type for attribute contentType that is used in WebView.
/*!
It indicates the content type returned from the data source defined for the control. The supported values are,
*/
enum class ContentType
{
  Url,      //!< The page should be loaded from the URL returned from the data source.
  Content,  //!< The page should be loaded from the raw content returned from the data source.
  File      //!< The page should be loaded from the files defined.
};

//! \brief This is the enumeration type for the view parameter direction.
/*!
This type is used internally in the Leave Script Behind code, not directly used in the LSB views. The supported values are,
*/
enum class Direction
{
  Input,    //!< The parameter is used as input parameter for the view control.
  Output    //!< The parameter is used as output parameter for the view control.
};

//! \brief This is the enumeration type for the attribute dock in the Button control.
/*!
It defines how the button will be docked in the space reserved for it. The supported values are,
*/
enum class DockStyle
{
  None,     //!< This means the button is not docked, it will have its default size.
  Left,     //!< This means the button is docked to left of the space, taking full height of space and keep the default width.
  Top,      //!< This means the button is docked to top of the space, taking full width of space and keep the default height.
  Right,    //!< This means the button is docked to right of the space, taking full height of space and keep the default width.
  Bottom,   //!< This means the button is docked to bottom of the space, taking full width of space and keep the default height.
  Fill      //!< This means the button will take the whole space. This indirectly provides the capability to control the button size through the layout control.
};

//! \brief This is the enumeration type for when to execute the script defined in the Procedure.
/*!
It defines when the Procedure will execute the script associated with it. The supported values are,
*/
enum class ExecuteAt
{
  ParameterChanging,      //!< The script is kicked off when input parameter(s) is changed
  OneShotInitializing,    //!< The script is kicked off when the procedure is initialized and is executed once only
  TimerTicking,           //!< The script is kicked off each time the timer approches the interval
  TimerStartAndTicking    //!< The script is kicked off when timer is started and approches interval
};

//! \brief This is the enumeration type used for the fixedView attribute in the SplitLayout.
/*!
It indicates which pane in the SplitLayout control has fixed size. The supported values are,
*/
enum class FixedView
{
  None,     //!< None of the two panes have fixed size, i.e. both panes are resizable when the view window resizes.
  Left,     //!< The left pane in the split layout control has fixed size, i.e. it does not resize when the view window resizes.
  Right,    //!< The right pane in the split layout control has fixed size.
  Top,      //!< The top pane in the split layout control has fixed size.
  Bottom    //!< The bottom pane in the split layout control has fixed size.
};

//! \brief This is the enumeration type for standard font families.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#a0cd7bfd21a4f901245d3c86d8ea0c080">wxFontFamily</a> on the wxWidgets
Web site for more details. The supported values are,
*/
enum class FontFamily
{
  Default,      //!< A default font.
  Decorative,   //!< A decorative font.
  Roman,        //!< A formal, serif font.
  Script,       //!< A handwriting font.
  Swiss,        //!< A sans-serif font.
  Modern,       //!< A fixed pitch font.
  Teletype      //!< A teletype (i.e. monospaced) font.
};

//! \brief This is the enumeration type for font styles.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#ab8f87d0b928ad1f8cba7d1c01f5f7a55">wxFontStyle</a> on the wxWidgets
for more details. The supported values are,
*/
enum class FontStyle
{
  Normal,       //!< The font is drawn without slant.
  Italic,       //!< The font is slanted in an italic style.
  Slant         //!< The font is slanted, but in a roman style.
};

//! \brief This is the enumeration type for font weight.
/*!
Please check <a href="https://docs.wxwidgets.org/3.2/interface_2wx_2font_8h.html#a7cc37d08c7e84370f4fcc175b557a022">wxFontWeight</a> on the wxWidgets
for more details. The supported values are,
*/
enum class FontWeight
{
  Thin,         //!< Thin font (weight = 100).
  ExtraLight,   //!< Extra Light (Ultra Light) font (weight = 200).
  Light,        //!< Light font (weight = 300).
  Normal,       //!< Normal font (weight = 400).
  Medium,       //!< Medium font (weight = 500).
  SemiBold,     //!< Semi Bold (Demi Bold) font (weight = 600).
  Bold,         //!< Bold font (weight = 700).
  ExtraBold,    //!< Extra Bold (Ultra Bold) font (weight = 800).
  Heavy,        //!< Heavy (Black) font (weight = 900).
  ExtraHeavy    //!< Extra Heavy font (weight = 1000).
};

//! \brief This is the enumeration type used for the align attribute in the Column.
/*!
It indicates how the content in the column will be aligned horizontally. The supported values are,
*/
enum class HorizontalAlignment
{
  Center,       //!< The content in the column will be center aligned.
  Left,         //!< The content in the column will be left aligned.
  Right         //!< The content in the column will be right aligned.
};

//! \brief This is the enumeration type used for the method attribute in the WebData.
/*!
It indicates which HTTP method should be used for the web request to download data for the view control. The supported values are,
*/
enum class HttpMethod
{
  Get,      //!< The web request uses GET method to download data from web endpoint.
  Post,     //!< The web request uses POST method to download data from web endpoint.
};

//! \brief This is the enumeration type for known paths for file references.
/*!
The known paths are all relative to the LSB applciation folders. Specify None to use any raw URL or path.The supported values are,
*/
enum class KnownPath
{
  None,     //!< It's not using any known path, the content is raw URL.
  View,     //!< The path is pointint to the view folder.
  Libs,     //!< The path is pointing to the libs folder.
  Data,     //!< The path is pointing to the data folder.
  Temp      //!< The path is pointing to the temp folder.
};

//! \brief This is the enumeration type for the chart line types.
/*!
The supported values are,
*/
enum class LineType
{
  Straight, //!< Straight line is used for drawing the lines in ChartView.
  Stepped   //!< Stepped line is used for drawing the lines in ChartView.
};

//!< \brief This is the enumeration type for the view attribute loadDataAt.
/*!
This attribute indicates when to load data for a view control. The supported values are,
*/
enum class LoadDataAt
{
  Default,      //!< Data for the view will be loaded when there is change in the input parameters.
  Creating,     //!< Data for the view will be loaded when the view is created.
  Visualizing   //!< Data for the view will be loaded when the view becomes visible for the first time.
};
  
//! \brief This is the enumeration type used for the activation attribute of OutputParameter,
/*!
It indicates which operation would trigger the ouput parameter value changed event and send out the changed parameter values.
The supported values are,
*/
enum class OperationType
{
  Default,      //!< The default operation on the view control, which is same to Selecion.
  Selection,    //!< When item or content is selected in the view control, it will trigger the OutputParameter changed event.
  Activation,   //!< The activation operation in the view control, which is same to DoubleClick.
  DoubleClick   //!< When item in view control is double clicked, it will trigger the OutputParameter changed event.
};
  
//! \brief This is the enumeration type used for the orientation attribute in the SplitLayout.
/*!
It indicates the layout direction of the two panes in the SplitLayout. The supported values are,
*/
enum class Orientation
{
  Horizontal,   //!< The two panes are placed horizontally, one in left and one in right.
  Vertical      //!< The two panes are placed vertically, on in top and one in bottom.
};
  
//! \brief This is the enumeration type for the attribute type in the PropertyField configuration.
/*!
It defines which value type is used for the property definition. The supported values are,
*/
enum class PropertyValueType
{
  Boolean,          //!< The value is in boolean type.
  Flags,            //!< The value is a flags value, which means multiple bits value with each bit as a flag value.
  Float,            //!< The value is a float value.
  Integer,          //!< The value is an integer value.
  UnsignedInteger,  //!< The value is an unsigned integer value.
  String,           //!< The value is a string value.
  Password,         //!< The value is a string value for password.
  ArrayString,      //!< The value is a string array.
  LongString,       //!< The value is a multiple line string value.
  Enumeration,      //!< The value is in an enumeration type.
  MultiChoice,      //!< The value allows selection from multiple values.
  Date,             //!< The value is a date value.
  Font,             //!< The value is a font value.
  Cursor,           //!< The value is a cursor.
  Color,            //!< The value is a color.
  SystemColor,      //!< The value is one of the system colors.
  File,             //!< The value is a file.
  ImageFile,        //!< The value is an image file.
  Folder            //!< The value is a folder.
};

//! \brief This is the enumeration type for defining the size type of table rows and table columns.
/*!
It defines how the actual size of table row or table column are calculated. The supported values are,
*/
enum class SizeType
{
  absolute,     //!< The size is specified as absolute pixels.
  percentage    //!< The size is specified as percentage of totoal size.
};
  
//! \brief This is the enumeration type used for the tabPosition attribute in the TabLayout.
/*!
It indicates the position of the tab bar in the TabLayout. The supported values are,
*/
enum class TabPosition
{
  Top,      //!< The tab bar will be put at the top of the tab layout control. This is the default value.
  Bottom,   //!< The tab bar will be put at the bottom of the tab layout control.
  Left,     //!< The tab bar will be put at the left side of the tab layout control.
  Right     //!< The tab bar will be put at the right side of the tab layout control.
};
  
//! \brief This is the enumeration type used in the InputParameter to indicate what kind of changes happened to the InputParameter.
/*!
These flags are implemented as properties on the parameters available in Lua script. The supported values are,
*/
enum class TriggerFlags
{
  IsNull,       //!< The input parameter value is null.
  IsEmpty,      //!< The input parameter value is an empty string.
  IsWhiteSpace, //!< The input parameter value contains whitespace only, not an empty string.
  IsTrue,       //!< The input parameter value is boolean value true.
  IsFalse,      //!< The input parameter value is boolean value false.
  IsZero,       //!< The input parameter value is 0.
  IsPositive,   //!< The input parameter value is a positive value, greater than 0.
  IsNegative,   //!< The input parameter value is a negative value, less than 0.
  IsMatched,    //!< The input parameter value matches the specified regular expression pattern for the parameter.
  IsChanged,    //!< The input parameter value is changed.
  IsTrigger     //!< The input parameter is the one triggered the check.
};
  
//! \brief This is the enumeration type of how to trim spaces in a string value.
/*!
The supported values are,
*/
enum class TrimSpace
{
  None,     //!< The string value won't be trimmed.
  Left,     //!< Only the left end spaces in the string will be trimmed.
  Right,    //!< Only the right end spaces in the string will be trimmed.
  Both      //!< Both left and right end spaces in string will be trimmed.
};
  
//! \brief This is the enumeration type for when to notify text change in TextInput control.
/*!
The supported values are,
*/
enum class WhenToNotify
{
  Enter,        //!< The text control sends text change event when enter key is pressed.
  TextChange,   //!< The text control sends text change event when the text content is truly changed.
  Both          //!< The text control sends text change event on both cases.
};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_data Data Classes

This page lists all the data types and data classes that are used for data nodes in the LSB view files.
@{
*/

//! \brief This is the node for defining content of about information in a LSB view.
/*!
 - The content of this node is for the about information.
*/
class About
{
  public AboutDataType type;        //!< [Mandatory] This attribute defines the type of content in the About node.
};

//! \brief This node is used to select one of the supported data sources.
/*!
There is no specific node name for this node. Only one of the following data source nodes can be used.
 - csv - The data source is using the CsvData, i.e. data is downloaded through HTTP Web request.
 - json - The data source is using the JsonData, i.e. data is downloaded through HTTP Web request.
 - sql - The data source is using the SqlData, i.e. data is downloaded through SQL query.
 - script - The data source is using the ScriptData, i.e. data is generated through the script execution.
*/
class ChoiceOfData
{
  public bool showProgress;     //!< This optional attribute defines if a progress dialog should be shown during the retrieval of data. The default value is false.
};

//! \brief This node is used to select one of the supported view controls.
/*!
There is no specific node name for this node. Only one of the following control nodes can be used.
 - splitLayout - The node should be specified to use the SplitLayout control.
 - tabLayout - The node should be specified to use the TabLayout control.
 - tableLayout - The node should be specified to use the TableLayout control.
 - buttonGroup - The node should be specified to use the ButtonGroup control.
 - chartView - The node should be specified to use the ChartView control.
 - listView - The node should be specified to use the ListView control.
 - textView - The node should be specified to use the TextView control.
 - treeListView - The node should be specified to use the TreeListView control.
 - treeView - The node should be specified to use the TreeView control.
 - webView - The node should be specified to use the WebView control.
 - button - The node should be specified to use the Button control.
 - propertyInput - The node should be specified to use the PropertyInput control.
 - textInput - The node should be specified to use the TextInput control.
 - comboBox - The node should be specified to use the ComboBox control.
*/
class ChoiceOfView
{
};

//! \brief This is color type that supports either CssColor or HtmlColor.
class Color
{
};

//! \brief This node defines the color setting to be used in ChartView.
class ColorSetting
{
  public Color fillColor;           //!< The color for fill.
  public Color borderColor;         //!< The color for borders.
  public Color lineColor;           //!< The color for lines.
};

//! \brief This node defines the attributes for the Column to be used in ListView and TreeListView.
class Column
{
  public string name;                   //!< This is the required name for the column. It's also used to find the attribute in data.
  public string displayName;            //!< Display name for the column header. If it's not specified, then name is used. Optional.
  public int width;                     //!< This is optional attribute for the column width.
  public HorizontalAlignment align;     //!< This is optional attribute that controls how th value in the column is aligned.
  public bool visible;                  //!< This is optional attribute that controls if the column is visible. The default value is true.
};

//! \brief This node defines a set of columns to be used in the ListView or TreeListView controls.
/*!
This is a container node for the following single type of nodes.
 - column - A set of column nodes for columns in the ListView or TreeListView.
*/
class ColumnSet
{
};

//! \brief This is an attribute group, it defines the attributes that are used in all components, the base for all view controls, Procedure and ViewLauncher.
class ComponentAttributes
{
  public UUID id;       //!< This attribute in type UUID is a mandatory attribute for all components.
};

//! \brief This is a node group, it defines the child nodes for all components, which is base of all view controls, Procedure and ViewLauncher.
/*!
Following nodes can be included, and each one of them can appear at most once.
 - input - This node for InputParam is optional. It defines the input parameters for the component.
 - output - This node for OutputParam is optional. It defines the output parameters for the component.
 - condition - This node is optional. It contains a piece of Lua script, defines if the input paramter value changes should trigger data source retrieval.
 - data - This node for ChoiceOfData is optional. It defines the data source for the component.
*/
class ComponentElements
{
};

//! \brief This is the node of ContextMenu for defining a context menu in LSB view controls.
/*!
It contains at least one of following items and there is no upper boundary on the node count.
 - menuItem - This child node in type of ContextMenuItem is for menu items in the context menu.
 - separator - This child node in type of ContextMenuSeparator is for separators in the context menu.
 - subMenu - This child node in type of ContextMenuSubMenu is for sub menu in the context menu.
*/
class ContextMenu
{
  public bool copy;         //!< This boolean attribute is optional, it controls if the copy menu items should be enabled. Default value is false.
  public bool refresh;      //!< This boolean attribute is optional, it controls if the refresh menu item should be enabled. Default value is false. This refresh menu item will automatically load the data from the associated data source and refresh the context in the view control.
};

//! \brief This is the node of ContextMenuItem for context menu item.
/*!
It may contain following nodes as child.
 - output - This child node is optional and is in type of OutputParamSet for all output parameters specific for this menu item.
 - data - This child node is optional and is in type of ChoiceOfData for the data source associated with this menu item.
*/
class ContextMenuItem
{
  public string text;       //!< This is the attribute for the context menu item text.
};

//! \brief This is the node of ContextMenuSeparator for separator in context menu.
/*!
There is no content, attribute or child node in the node.
*/
class ContextMenuSeparator
{
};

//! \brief This is the node of ContextMenuSubMenu for sub menu in context menu.
/*!
It should contain at least one of following nodes and there is no explicit upper boundary on the node count.
 - menuItem - This child node is in type of ContextMenuItem. It's for menu items in the sub menu.
 - separator - This child node is in type of ContextMenuSeparator. It's for separators in the sub menu.
 - subMenu - This child node is in type of ContextMenuSubMenu. It's for sub menu in the sub menu - this indicates that the sub menu could be nested layer by layer.
*/
class ContextMenuSubMenu
{
  public string text;       //!< This is the attribute for the context menu sub menu text.
};

//! \brief This is CSS color type in format of rgb(r, g, b) or rgba(r, g, b, a).
class CssColor
{
};

//! \brief This is the node to define the configuration for downloading CSV data from an URL through HTTP Web request.
class CsvData : public WebData
{
  public string delimeter;      //!< This optional attribute defines the delimeted used for separating the columns in CSV data.
};

//! \brief This node defines a set of parameter mapping from an output parameter (source) to one or more input parameter (target).
/*!
This node contains a set of mapping nodes for each source parameter.
 - mapping - These nodes are in type of Mapping. It defines the mapping from one source parameter to one or more target parameters.
*/
class DataFlow
{
};

//! \brief This node defines the file reference to be used in WebView.
/*!
 - content - The content of this node is the actual path value.
*/
class FileReference
{
  public KnownPath path;        //!< This optional attribute defines the path type. The default value is None,
};

//! \brief This node defines a set of FileReference to be used in the WebView.
/*!
This node contains a set of reference nodes for each file reference.
 - reference - A set of reference nodes in type of FileReference for the file references to be used in the WebView.
*/
class FileReferences
{
};

//! \brief This is the node that defines font description, for defining fonts to be used in LSB views.
class FontDesc
{
  public unsigned int encoding;    //!< This is an optional attribute for the font encoding, default value is 33.
  public FontFamily family;        //!< This is an optional attribute for the font family, default value is Default.
  public unsigned int pointSize;   //!< This is a required attribute for the font size in point.
  public FontStyle style;          //!< This is an optional attribute for the font style, default value is Normal.
  public FontWeight weight;        //!< This is an optional attribute for the font weight, default value is Normal.
  public bool underline;           //!< This is an optional boolean attribute that controls if the font should be underlined, default value is false.
  public bool strikethrough;       //!< This is an optional boolan attribute that controls if the font should be strikethrough, default value is false.
  public string faceName;          //!< This is the attribute for the font face name.
};

//! \brief This node defines the highlight settings used in WebView for highlighting text.
class HighlightSetting
{
  public string name;           //!< This mandatory attribute defines the name for the highlight setting.
  public string pattern;        //!< This mandatory attribute defines the regular expression pattern for the content to be highlighted.
  public HtmlColor backColor;   //!< This optional attribute defines the background color for the text to be highlighted.
  public HtmlColor foreColor;   //!< This optional attribute defines the foreground color for the text to be highlighted.
};

//! \brief This is HTML color type in format of \#rrggbb.
class HtmlColor
{
};

//! \brief This is the node that defines the InputParam for input parameters.
class InputParam : public Parameter
{
  public string valuePattern;   //! This is an optional attribute that defines the value pattern for the input parameter. Only if the value matches the pattern, then some operations will be triggered. The default value is empty, which means no pattern is defined.
};

//! \brief This is the node for the InputParamSet, contains a set of InputParam.
/*!
 - param - A set of param nodes in type of InputParam.
*/
class InputParamSet
{
};

//! \brief This is the node to define the configuration for downloading JSON data from an URL through HTTP Web request.
class JsonData : public WebData
{
  public string path;           //!< This optional attribute defines the path to the data to be returned in a complicated JSON object or an JSON array. If the path is not specified, the whole JSON data downloaded is returned.
};

//! \brief This node defines the filter setting for ListView.
class ListViewFilter
{
  public bool visible;              //!< This optional attribute defines if the filter control is visible in ListView. The default value is true.
  public string prompt;             //!< This optional attribute defines the prompt text for the filter input. Default value is empty, which means there is no prompt.
  public string placeholder;        //!< This optional attribute defines the placeholder text in the filter input when the actual value is empty. Default value is empty.
};

//! \brief This node defines the status setting for the ListView.
class ListViewStatus
{
  public bool visible;                      //!< This optional attribute defines if the status bar is visible for ListView. Default value is true.
  public string singleItemCountPrompt;      //!< This optional attribute defines the prompt text when there is only one item in the ListView. %%ITEM_COUNT%% is the placeholder for item count.
  public string multipleItemCountPrompt;    //!< This optional attribute defines the prompt text when there are multiple items in the ListView. %%ITEM_COUNT%% is the placeholder for item count.
  public string noSelectionPrompt;          //!< This optional attribute defines the prompt text when there is no item selected in the ListView.
  public string currentSelectionPrompt;     //!< This optional attribute defines the prompt text for showing current selection in ListView. %%ITEM_INDEX%% is the placeholder for currently selected item index.
  public string singleSelectionPrompt;      //!< This optional attribute defines the prompt text when there is only one item selected in the ListView.
  public string multipleSelectionPrompt;    //!< This optional attribute defines the prompt text when there are multiple items in the ListView.
};

//! \brief This node defines the parameter mapping from one output parameter (source) to one or more input parameter (target).
/*!
This node may contain one to many target nodes.
- target - The target node defines the unique ID of target parameter (InputParam). The node has the UUID as its content, no attributes on it.
*/
class Mapping
{
  public UUID source;       //!< This mandatory defines the unique ID of a source parameter (OutputParam).
};

//! \brief This node defines single option to be used ComboBox or PropertyInput control.
/*!
There is no attribute on the node.
 - content - It's the option value.
*/
class Option
{
  public string group;          //!< This optional attribute defines the option group that the option belongs to.
};

//! \brief This node defines a set of options to be used in ComboBox or PropertyInput control.
/*!
 - option - A set of option nodes for the options to be used in ComboBox or PropertyInput.
*/
class OptionList
{
};

//! \brief This is the OS type that defines which operating system the LSB view supports.
/*!
The value could be one of the values below or a combination of them separated by semi-colon.
  - Any - This is equivalent to Windows;Linux;MacOS
  - Windows - The LSB view supports Windwos system
  - Linux - The LSB view supports Linux system
  - MacOS - The LSB view supports Mac OS X system
*/
class OS
{
};

//! \brief This is the node that defines the OutputParam for output parameters.
class OutputParam : public Parameter
{
  public OperationType activation;  //!< This is an optional attribute that defines which operation in the view control would trigger the activation of parameter change. The default value is Default.
};

//! \brief This is the node for the OutputParamSet, contains a set of OutputParam.
/*!
 - param - A set of param nodes in type of OutputParam.
*/
class OutputParamSet
{
};

//! \brief This is the node for the Parameter. It's base class for InputParameter and OutputParameter.
class Parameter
{
  public UUID id;       //!< The unique ID for the parameter, it's mandatory.
  public string name;   //!< Name of the parameter, it's mandatory.
};

//! \brief This node defines the prompt text for the ComboBox and TextInput.
/*!
 - content - It's the prompt text to be displayed.
*/
class Prompt
{
  public bool visible;          //!< This optional boolean flag controls if the prompt should be visible.
  public bool exclusive;        //!< This optional boolean flag controls if the prompt should be displayed in exclusive line.
};

//! \brief This node defines the configuration for a property field to be used in PropertyInput control.
/*!
 - options - This child node is optional. It defines the option list when the property is in a type needs options support.
*/
class PropertyField
{
  public string name;               //!< This mandatory attribute defines the name for the property.
  public PropertyValueType type;    //!< This mandatory attribute defines the type for the property.
  public string label;              //!< This optional attribute defines the label for the property. If it's empty, then the name will be used for label.
  public string category;           //!< This optional attribute defines the category for the property.
  public string description;        //!< This optional attribute defines the description text for the property.
  public string default;            //!< This optional attribute defines the default value for the property.
  public string fileTypes;          //!< This optional attribute defines the file types supported by the property. It is used in the popup dialog when user tries to select a file.
  public string initialPath;        //!< This optional attribute defines the initial path for the file property. It is used in the popup dialog when user tries to select a file.
};

//! \brief This node defines the font and style setting for condition matched rows in ListView and TreeListView.
/*!
 - font - This child node defines the font to be used in the matched row.
*/
class RowStyle
{
  public string condition;          //!< This mandatory string attribute contains the row condition written in Lua script. The matched row will be displayed using configured font and colors.
  public Color foreColor;           //!< This optional attribute defines foreground color for the matched row.
  public Color backColor;           //!< This optional attribute defines background color for the matched row.
};

//! \brief This is the node that defines the configuration for generatign data through script execution.
/*!
 - content - The content of this node is the script to be executed for generating the data.
*/
class ScriptData
{
  public string type;           //!< This mandatory attribute defines the type of the script, see shell configuration for supported script types. The Lua is an embedded and always supported script language.
  public unsigned int timeout;  //!< This optional attribute defines the timeout for the script execution. Default value is 0, which means it will use the global setting for the script timeout.
};

//! \brief This is the node that defines the configuration for retrieving data through SQL query.
/*!
 - content - The content of this node is the query statement to be executed to search for the data in the database.
*/
class SqlData
{
  public string server;         //!< This mandatory attribute indicates the database server to connect to.
  public string database;       //!< This mandatory attribute indicates the name of the database that contains the data.
  public string user;           //!< This attribute defines the user name to be used for connecting to the database. It's optional.
};

//! \brief This node is used for defining the table cell in TableControl.
/*!
This node is derived from ChoiceOfView and uses one of the supported view controls as child node of it. Besides, it has extra attributes.
*/
class TableCell : public ChoiceOfView
{
  public unsigned int row;          //!< This mandatory attribute defines row of the table cell.
  public unsigned int col;          //!< This mandatory attribute defines column of the table cell.
  public unsigned int rowSpan;      //!< This optional attribute defines row span of the table cell. Default value is 1.
  public unsigned int colSpan;      //!< This optional attribute defines column span of the table cell. Default value is 1.
};

//! \brief This node defines the table column sizing settings.
class TableColumn
{
  public SizeType sizeType;         //!< This mandatory attribute defines how the width is specified for the table column.
  public float width;               //!< This mandatory attribute defines the width of the table column.
};

//! \brief This node defines the table row sizing settings.
class TableRow
{
  public SizeType sizeType;         //!< This mandatory attribute defines how the height is specified for the table row.
  public float height;              //!< This mandatory attribute defines the height of the table row.
};

//! \brief This node is used for defining the tag page in TabControl.
/*!
It's derived from ChoiceOfView and uses one of the supported view controls as child node of it. Besides, it has extra attribute.
*/
class TabPage : public ChoiceOfView
{
  public string title;      //!< This is a mandatory attribute that defines the title for the tab page.
};

//! \brief This is the 16-byte unique ID.
/*!
The string representation of an UUID is 8-4-4-4-12 hexadecimal digits. One example of UUID string is b0db8ea8-2c10-4c20-9888-d4d0e91a00f0.
*/
class UUID
{
};

//! \brief This is the node for defining version information.
class Version
{
  public unsigned short major;      //!< This is the major number in the version, it's mandatory.
  public unsigned short minor;      //!< This is the minor number in the version, it's mandatory.
  public unsigned short build;      //!< This is the build number in the version, it's optional.
  public unsigned short revision;   //!< This is the revision part in the version, it's optional.
};

//! \brief This group defines the attributes for all views.
/*!
It includes all attributes deinfed in the ComponentAttributes.
 - loadDataAt - This optional attribute defines when the view should load the data. Default value is Default.
*/
class ViewAttributes
{
};

//! \brief This is the node that defines the caption of a LSB view control
/*!
 - content - The content of this node is for the view caption.
 */
class ViewCaption
{
  public bool visible;          //!< This is an optional boolean attribute that controls if the view caption is visible, default value is true.
};

//! \brief This group defines the child nodes for all views.
/*!
It includes all elements defined in the ComponentElements.
 - caption - This node is optional. It defines the caption for the view.
 - contextMenu - This node is optional. It defines the context menu for the view.
*/
class ViewElements
{
};

//! \brief This is the base node to define the configuration for downloading data from an URL through HTTP Web request.
/*!
Following nodes can be specified under this node,
 - url - This child node contains the URL for the request. It's represented as content of the child node.
 - payload - This child node contains the payload used for the request as it's content. It's only used when the method is set to Post.
*/
class WebData
{
  public HttpMethod method;     //!< This optional attribute defines the HTTP Web method used for the request. Default value is Get.
  public string contentType;    //!< This optional attribute defines the content type for the HTTP Web request.
};

//! \brief This node defines the data column for the X axis in ChartView.
class XAxisColumn
{
  public string name;               //!< This mandatory attribute defines the name of the data column.
  public string displayName;        //!< This optional attribute defines the display name for the data column. If it's not specified, then the name is used.
  public bool isDateTime;           //!< This optional attribute defines if the data column is in type of datetime. Default value is false.
};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_view View Controls
This page contains the list of all view controls available in LSB.

- Layout Controls
  - ButtonGroup
  - SplitLayout
  - TabLayout
  - TableLayout
- Data View Controls
  - ChartView
  - ListView
  - TextView
  - TreeListView
  - TreeView
  - WebView
- Input Controls
  - Button
  - ComboBox
  - TextInput
  - PropertyInput
- Invisible Components
  - Procedure
  - ViewLauncher

@{
*/

//! \brief This node defines the ButtonGroup layout control that supports arranging a group of buttons in the designated area.
/*!
The node contains following child nodes,
  - All nodes defined in ViewElements
  - buttons - This node contains a set of button nodes where each of them is a Button node.
  - All attributes defined in the ViewAttributes, plus
*/
class ButtonGroup
{
  public bool autoFlow;                 //!< This optional boolean attribute defines if the buttons would autoflow to next row when the tital width exceeds the space width.
  public unsigned int buttonsPerRow;    //!< This optional attribute defines how many buttons will be put in each row when the autoFlow is set to false.
};

//!
class SplitLayout
{

};

class TabLayout
{

};

class TableLayout
{

};

class ChartView
{

};

class ListView
{

};

class TextView
{

};

class TreeListView
{

};

class TreeView
{

};

class WebView
{

};

class Button
{

};

class ComboBox
{

};

class TextInput
{

};

class PropertyInput
{

};

class Procedure
{

};

class ViewLauncher
{

};

/*!
@}
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_lsb LSB View

@{
@}

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_create How to Create a LSB View

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_debug How to Test/Debug a LSB View

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*!
\defgroup section_faq Other Frequently Seen Questions

*/
